// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	gqlmodels "github.com/wednesday-solution/go-boiler/graphql/models"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Comment struct {
		Body      func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Post      func(childComplexity int) int
		Title     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		User      func(childComplexity int) int
	}

	CommentDeletePayload struct {
		ID func(childComplexity int) int
	}

	CommentPayload struct {
		Comment func(childComplexity int) int
	}

	CommentsDeletePayload struct {
		Ids func(childComplexity int) int
	}

	CommentsPayload struct {
		Comments func(childComplexity int) int
	}

	CommentsUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	CompaniesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	CompaniesPayload struct {
		Companies func(childComplexity int) int
	}

	CompaniesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	Company struct {
		Active    func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Locations func(childComplexity int) int
		Name      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Users     func(childComplexity int) int
	}

	CompanyDeletePayload struct {
		ID func(childComplexity int) int
	}

	CompanyPayload struct {
		Company func(childComplexity int) int
	}

	Follower struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Followee  func(childComplexity int) int
		Follower  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	FollowerDeletePayload struct {
		ID func(childComplexity int) int
	}

	FollowerPayload struct {
		Follower func(childComplexity int) int
	}

	FollowersDeletePayload struct {
		Ids func(childComplexity int) int
	}

	FollowersPayload struct {
		Followers func(childComplexity int) int
	}

	FollowersUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	Location struct {
		Active    func(childComplexity int) int
		Address   func(childComplexity int) int
		Company   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Users     func(childComplexity int) int
	}

	LocationDeletePayload struct {
		ID func(childComplexity int) int
	}

	LocationPayload struct {
		Location func(childComplexity int) int
	}

	LocationsDeletePayload struct {
		Ids func(childComplexity int) int
	}

	LocationsPayload struct {
		Locations func(childComplexity int) int
	}

	LocationsUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	Mutation struct {
		CreateComment   func(childComplexity int, input gqlmodels.CommentCreateInput) int
		CreateComments  func(childComplexity int, input gqlmodels.CommentsCreateInput) int
		CreateCompanies func(childComplexity int, input gqlmodels.CompaniesCreateInput) int
		CreateCompany   func(childComplexity int, input gqlmodels.CompanyCreateInput) int
		CreateFollower  func(childComplexity int, input gqlmodels.FollowerCreateInput) int
		CreateFollowers func(childComplexity int, input gqlmodels.FollowersCreateInput) int
		CreateLocation  func(childComplexity int, input gqlmodels.LocationCreateInput) int
		CreateLocations func(childComplexity int, input gqlmodels.LocationsCreateInput) int
		CreatePost      func(childComplexity int, input gqlmodels.PostCreateInput) int
		CreatePosts     func(childComplexity int, input gqlmodels.PostsCreateInput) int
		CreateRole      func(childComplexity int, input gqlmodels.RoleCreateInput) int
		CreateRoles     func(childComplexity int, input gqlmodels.RolesCreateInput) int
		CreateUser      func(childComplexity int, input gqlmodels.UserCreateInput) int
		CreateUsers     func(childComplexity int, input gqlmodels.UsersCreateInput) int
		DeleteComment   func(childComplexity int, id string) int
		DeleteComments  func(childComplexity int, filter *gqlmodels.CommentFilter) int
		DeleteCompanies func(childComplexity int, filter *gqlmodels.CompanyFilter) int
		DeleteCompany   func(childComplexity int, id string) int
		DeleteFollower  func(childComplexity int, id string) int
		DeleteFollowers func(childComplexity int, filter *gqlmodels.FollowerFilter) int
		DeleteLocation  func(childComplexity int, id string) int
		DeleteLocations func(childComplexity int, filter *gqlmodels.LocationFilter) int
		DeletePost      func(childComplexity int, id string) int
		DeletePosts     func(childComplexity int, filter *gqlmodels.PostFilter) int
		DeleteRole      func(childComplexity int, id string) int
		DeleteRoles     func(childComplexity int, filter *gqlmodels.RoleFilter) int
		DeleteUser      func(childComplexity int, id string) int
		DeleteUsers     func(childComplexity int, filter *gqlmodels.UserFilter) int
		UpdateComment   func(childComplexity int, id string, input gqlmodels.CommentUpdateInput) int
		UpdateComments  func(childComplexity int, filter *gqlmodels.CommentFilter, input gqlmodels.CommentsUpdateInput) int
		UpdateCompanies func(childComplexity int, filter *gqlmodels.CompanyFilter, input gqlmodels.CompaniesUpdateInput) int
		UpdateCompany   func(childComplexity int, id string, input gqlmodels.CompanyUpdateInput) int
		UpdateFollower  func(childComplexity int, id string, input gqlmodels.FollowerUpdateInput) int
		UpdateFollowers func(childComplexity int, filter *gqlmodels.FollowerFilter, input gqlmodels.FollowersUpdateInput) int
		UpdateLocation  func(childComplexity int, id string, input gqlmodels.LocationUpdateInput) int
		UpdateLocations func(childComplexity int, filter *gqlmodels.LocationFilter, input gqlmodels.LocationsUpdateInput) int
		UpdatePost      func(childComplexity int, id string, input gqlmodels.PostUpdateInput) int
		UpdatePosts     func(childComplexity int, filter *gqlmodels.PostFilter, input gqlmodels.PostsUpdateInput) int
		UpdateRole      func(childComplexity int, id string, input gqlmodels.RoleUpdateInput) int
		UpdateRoles     func(childComplexity int, filter *gqlmodels.RoleFilter, input gqlmodels.RolesUpdateInput) int
		UpdateUser      func(childComplexity int, id string, input gqlmodels.UserUpdateInput) int
		UpdateUsers     func(childComplexity int, filter *gqlmodels.UserFilter, input gqlmodels.UsersUpdateInput) int
	}

	Post struct {
		Body      func(childComplexity int) int
		Comments  func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Title     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		User      func(childComplexity int) int
	}

	PostDeletePayload struct {
		ID func(childComplexity int) int
	}

	PostPayload struct {
		Post func(childComplexity int) int
	}

	PostsDeletePayload struct {
		Ids func(childComplexity int) int
	}

	PostsPayload struct {
		Posts func(childComplexity int) int
	}

	PostsUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	Query struct {
		Comment   func(childComplexity int, id string) int
		Comments  func(childComplexity int, filter *gqlmodels.CommentFilter) int
		Companies func(childComplexity int, filter *gqlmodels.CompanyFilter) int
		Company   func(childComplexity int, id string) int
		Follower  func(childComplexity int, id string) int
		Followers func(childComplexity int, filter *gqlmodels.FollowerFilter) int
		Location  func(childComplexity int, id string) int
		Locations func(childComplexity int, filter *gqlmodels.LocationFilter) int
		Post      func(childComplexity int, id string) int
		Posts     func(childComplexity int, filter *gqlmodels.PostFilter) int
		Role      func(childComplexity int, id string) int
		Roles     func(childComplexity int, filter *gqlmodels.RoleFilter) int
		User      func(childComplexity int, id string) int
		Users     func(childComplexity int, filter *gqlmodels.UserFilter) int
	}

	Role struct {
		AccessLevel func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		Users       func(childComplexity int) int
	}

	RoleDeletePayload struct {
		ID func(childComplexity int) int
	}

	RolePayload struct {
		Role func(childComplexity int) int
	}

	RolesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	RolesPayload struct {
		Roles func(childComplexity int) int
	}

	RolesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	User struct {
		Active             func(childComplexity int) int
		Address            func(childComplexity int) int
		Comments           func(childComplexity int) int
		Company            func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		Email              func(childComplexity int) int
		FirstName          func(childComplexity int) int
		FolloweeFollowers  func(childComplexity int) int
		FollowerFollowers  func(childComplexity int) int
		ID                 func(childComplexity int) int
		LastLogin          func(childComplexity int) int
		LastName           func(childComplexity int) int
		LastPasswordChange func(childComplexity int) int
		Location           func(childComplexity int) int
		Mobile             func(childComplexity int) int
		Password           func(childComplexity int) int
		Phone              func(childComplexity int) int
		Posts              func(childComplexity int) int
		Role               func(childComplexity int) int
		Token              func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		Username           func(childComplexity int) int
	}

	UserDeletePayload struct {
		ID func(childComplexity int) int
	}

	UserPayload struct {
		User func(childComplexity int) int
	}

	UsersDeletePayload struct {
		Ids func(childComplexity int) int
	}

	UsersPayload struct {
		Users func(childComplexity int) int
	}

	UsersUpdatePayload struct {
		Ok func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateComment(ctx context.Context, input gqlmodels.CommentCreateInput) (*gqlmodels.CommentPayload, error)
	CreateComments(ctx context.Context, input gqlmodels.CommentsCreateInput) (*gqlmodels.CommentsPayload, error)
	UpdateComment(ctx context.Context, id string, input gqlmodels.CommentUpdateInput) (*gqlmodels.CommentPayload, error)
	UpdateComments(ctx context.Context, filter *gqlmodels.CommentFilter, input gqlmodels.CommentsUpdateInput) (*gqlmodels.CommentsUpdatePayload, error)
	DeleteComment(ctx context.Context, id string) (*gqlmodels.CommentDeletePayload, error)
	DeleteComments(ctx context.Context, filter *gqlmodels.CommentFilter) (*gqlmodels.CommentsDeletePayload, error)
	CreateCompany(ctx context.Context, input gqlmodels.CompanyCreateInput) (*gqlmodels.CompanyPayload, error)
	CreateCompanies(ctx context.Context, input gqlmodels.CompaniesCreateInput) (*gqlmodels.CompaniesPayload, error)
	UpdateCompany(ctx context.Context, id string, input gqlmodels.CompanyUpdateInput) (*gqlmodels.CompanyPayload, error)
	UpdateCompanies(ctx context.Context, filter *gqlmodels.CompanyFilter, input gqlmodels.CompaniesUpdateInput) (*gqlmodels.CompaniesUpdatePayload, error)
	DeleteCompany(ctx context.Context, id string) (*gqlmodels.CompanyDeletePayload, error)
	DeleteCompanies(ctx context.Context, filter *gqlmodels.CompanyFilter) (*gqlmodels.CompaniesDeletePayload, error)
	CreateFollower(ctx context.Context, input gqlmodels.FollowerCreateInput) (*gqlmodels.FollowerPayload, error)
	CreateFollowers(ctx context.Context, input gqlmodels.FollowersCreateInput) (*gqlmodels.FollowersPayload, error)
	UpdateFollower(ctx context.Context, id string, input gqlmodels.FollowerUpdateInput) (*gqlmodels.FollowerPayload, error)
	UpdateFollowers(ctx context.Context, filter *gqlmodels.FollowerFilter, input gqlmodels.FollowersUpdateInput) (*gqlmodels.FollowersUpdatePayload, error)
	DeleteFollower(ctx context.Context, id string) (*gqlmodels.FollowerDeletePayload, error)
	DeleteFollowers(ctx context.Context, filter *gqlmodels.FollowerFilter) (*gqlmodels.FollowersDeletePayload, error)
	CreateLocation(ctx context.Context, input gqlmodels.LocationCreateInput) (*gqlmodels.LocationPayload, error)
	CreateLocations(ctx context.Context, input gqlmodels.LocationsCreateInput) (*gqlmodels.LocationsPayload, error)
	UpdateLocation(ctx context.Context, id string, input gqlmodels.LocationUpdateInput) (*gqlmodels.LocationPayload, error)
	UpdateLocations(ctx context.Context, filter *gqlmodels.LocationFilter, input gqlmodels.LocationsUpdateInput) (*gqlmodels.LocationsUpdatePayload, error)
	DeleteLocation(ctx context.Context, id string) (*gqlmodels.LocationDeletePayload, error)
	DeleteLocations(ctx context.Context, filter *gqlmodels.LocationFilter) (*gqlmodels.LocationsDeletePayload, error)
	CreatePost(ctx context.Context, input gqlmodels.PostCreateInput) (*gqlmodels.PostPayload, error)
	CreatePosts(ctx context.Context, input gqlmodels.PostsCreateInput) (*gqlmodels.PostsPayload, error)
	UpdatePost(ctx context.Context, id string, input gqlmodels.PostUpdateInput) (*gqlmodels.PostPayload, error)
	UpdatePosts(ctx context.Context, filter *gqlmodels.PostFilter, input gqlmodels.PostsUpdateInput) (*gqlmodels.PostsUpdatePayload, error)
	DeletePost(ctx context.Context, id string) (*gqlmodels.PostDeletePayload, error)
	DeletePosts(ctx context.Context, filter *gqlmodels.PostFilter) (*gqlmodels.PostsDeletePayload, error)
	CreateRole(ctx context.Context, input gqlmodels.RoleCreateInput) (*gqlmodels.RolePayload, error)
	CreateRoles(ctx context.Context, input gqlmodels.RolesCreateInput) (*gqlmodels.RolesPayload, error)
	UpdateRole(ctx context.Context, id string, input gqlmodels.RoleUpdateInput) (*gqlmodels.RolePayload, error)
	UpdateRoles(ctx context.Context, filter *gqlmodels.RoleFilter, input gqlmodels.RolesUpdateInput) (*gqlmodels.RolesUpdatePayload, error)
	DeleteRole(ctx context.Context, id string) (*gqlmodels.RoleDeletePayload, error)
	DeleteRoles(ctx context.Context, filter *gqlmodels.RoleFilter) (*gqlmodels.RolesDeletePayload, error)
	CreateUser(ctx context.Context, input gqlmodels.UserCreateInput) (*gqlmodels.UserPayload, error)
	CreateUsers(ctx context.Context, input gqlmodels.UsersCreateInput) (*gqlmodels.UsersPayload, error)
	UpdateUser(ctx context.Context, id string, input gqlmodels.UserUpdateInput) (*gqlmodels.UserPayload, error)
	UpdateUsers(ctx context.Context, filter *gqlmodels.UserFilter, input gqlmodels.UsersUpdateInput) (*gqlmodels.UsersUpdatePayload, error)
	DeleteUser(ctx context.Context, id string) (*gqlmodels.UserDeletePayload, error)
	DeleteUsers(ctx context.Context, filter *gqlmodels.UserFilter) (*gqlmodels.UsersDeletePayload, error)
}
type QueryResolver interface {
	Comment(ctx context.Context, id string) (*gqlmodels.Comment, error)
	Comments(ctx context.Context, filter *gqlmodels.CommentFilter) ([]*gqlmodels.Comment, error)
	Company(ctx context.Context, id string) (*gqlmodels.Company, error)
	Companies(ctx context.Context, filter *gqlmodels.CompanyFilter) ([]*gqlmodels.Company, error)
	Follower(ctx context.Context, id string) (*gqlmodels.Follower, error)
	Followers(ctx context.Context, filter *gqlmodels.FollowerFilter) ([]*gqlmodels.Follower, error)
	Location(ctx context.Context, id string) (*gqlmodels.Location, error)
	Locations(ctx context.Context, filter *gqlmodels.LocationFilter) ([]*gqlmodels.Location, error)
	Post(ctx context.Context, id string) (*gqlmodels.Post, error)
	Posts(ctx context.Context, filter *gqlmodels.PostFilter) ([]*gqlmodels.Post, error)
	Role(ctx context.Context, id string) (*gqlmodels.Role, error)
	Roles(ctx context.Context, filter *gqlmodels.RoleFilter) ([]*gqlmodels.Role, error)
	User(ctx context.Context, id string) (*gqlmodels.User, error)
	Users(ctx context.Context, filter *gqlmodels.UserFilter) ([]*gqlmodels.User, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Comment.body":
		if e.complexity.Comment.Body == nil {
			break
		}

		return e.complexity.Comment.Body(childComplexity), true

	case "Comment.createdAt":
		if e.complexity.Comment.CreatedAt == nil {
			break
		}

		return e.complexity.Comment.CreatedAt(childComplexity), true

	case "Comment.deletedAt":
		if e.complexity.Comment.DeletedAt == nil {
			break
		}

		return e.complexity.Comment.DeletedAt(childComplexity), true

	case "Comment.id":
		if e.complexity.Comment.ID == nil {
			break
		}

		return e.complexity.Comment.ID(childComplexity), true

	case "Comment.post":
		if e.complexity.Comment.Post == nil {
			break
		}

		return e.complexity.Comment.Post(childComplexity), true

	case "Comment.title":
		if e.complexity.Comment.Title == nil {
			break
		}

		return e.complexity.Comment.Title(childComplexity), true

	case "Comment.updatedAt":
		if e.complexity.Comment.UpdatedAt == nil {
			break
		}

		return e.complexity.Comment.UpdatedAt(childComplexity), true

	case "Comment.user":
		if e.complexity.Comment.User == nil {
			break
		}

		return e.complexity.Comment.User(childComplexity), true

	case "CommentDeletePayload.id":
		if e.complexity.CommentDeletePayload.ID == nil {
			break
		}

		return e.complexity.CommentDeletePayload.ID(childComplexity), true

	case "CommentPayload.comment":
		if e.complexity.CommentPayload.Comment == nil {
			break
		}

		return e.complexity.CommentPayload.Comment(childComplexity), true

	case "CommentsDeletePayload.ids":
		if e.complexity.CommentsDeletePayload.Ids == nil {
			break
		}

		return e.complexity.CommentsDeletePayload.Ids(childComplexity), true

	case "CommentsPayload.comments":
		if e.complexity.CommentsPayload.Comments == nil {
			break
		}

		return e.complexity.CommentsPayload.Comments(childComplexity), true

	case "CommentsUpdatePayload.ok":
		if e.complexity.CommentsUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.CommentsUpdatePayload.Ok(childComplexity), true

	case "CompaniesDeletePayload.ids":
		if e.complexity.CompaniesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.CompaniesDeletePayload.Ids(childComplexity), true

	case "CompaniesPayload.companies":
		if e.complexity.CompaniesPayload.Companies == nil {
			break
		}

		return e.complexity.CompaniesPayload.Companies(childComplexity), true

	case "CompaniesUpdatePayload.ok":
		if e.complexity.CompaniesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.CompaniesUpdatePayload.Ok(childComplexity), true

	case "Company.active":
		if e.complexity.Company.Active == nil {
			break
		}

		return e.complexity.Company.Active(childComplexity), true

	case "Company.createdAt":
		if e.complexity.Company.CreatedAt == nil {
			break
		}

		return e.complexity.Company.CreatedAt(childComplexity), true

	case "Company.deletedAt":
		if e.complexity.Company.DeletedAt == nil {
			break
		}

		return e.complexity.Company.DeletedAt(childComplexity), true

	case "Company.id":
		if e.complexity.Company.ID == nil {
			break
		}

		return e.complexity.Company.ID(childComplexity), true

	case "Company.locations":
		if e.complexity.Company.Locations == nil {
			break
		}

		return e.complexity.Company.Locations(childComplexity), true

	case "Company.name":
		if e.complexity.Company.Name == nil {
			break
		}

		return e.complexity.Company.Name(childComplexity), true

	case "Company.updatedAt":
		if e.complexity.Company.UpdatedAt == nil {
			break
		}

		return e.complexity.Company.UpdatedAt(childComplexity), true

	case "Company.users":
		if e.complexity.Company.Users == nil {
			break
		}

		return e.complexity.Company.Users(childComplexity), true

	case "CompanyDeletePayload.id":
		if e.complexity.CompanyDeletePayload.ID == nil {
			break
		}

		return e.complexity.CompanyDeletePayload.ID(childComplexity), true

	case "CompanyPayload.company":
		if e.complexity.CompanyPayload.Company == nil {
			break
		}

		return e.complexity.CompanyPayload.Company(childComplexity), true

	case "Follower.createdAt":
		if e.complexity.Follower.CreatedAt == nil {
			break
		}

		return e.complexity.Follower.CreatedAt(childComplexity), true

	case "Follower.deletedAt":
		if e.complexity.Follower.DeletedAt == nil {
			break
		}

		return e.complexity.Follower.DeletedAt(childComplexity), true

	case "Follower.followee":
		if e.complexity.Follower.Followee == nil {
			break
		}

		return e.complexity.Follower.Followee(childComplexity), true

	case "Follower.follower":
		if e.complexity.Follower.Follower == nil {
			break
		}

		return e.complexity.Follower.Follower(childComplexity), true

	case "Follower.updatedAt":
		if e.complexity.Follower.UpdatedAt == nil {
			break
		}

		return e.complexity.Follower.UpdatedAt(childComplexity), true

	case "FollowerDeletePayload.id":
		if e.complexity.FollowerDeletePayload.ID == nil {
			break
		}

		return e.complexity.FollowerDeletePayload.ID(childComplexity), true

	case "FollowerPayload.follower":
		if e.complexity.FollowerPayload.Follower == nil {
			break
		}

		return e.complexity.FollowerPayload.Follower(childComplexity), true

	case "FollowersDeletePayload.ids":
		if e.complexity.FollowersDeletePayload.Ids == nil {
			break
		}

		return e.complexity.FollowersDeletePayload.Ids(childComplexity), true

	case "FollowersPayload.followers":
		if e.complexity.FollowersPayload.Followers == nil {
			break
		}

		return e.complexity.FollowersPayload.Followers(childComplexity), true

	case "FollowersUpdatePayload.ok":
		if e.complexity.FollowersUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.FollowersUpdatePayload.Ok(childComplexity), true

	case "Location.active":
		if e.complexity.Location.Active == nil {
			break
		}

		return e.complexity.Location.Active(childComplexity), true

	case "Location.address":
		if e.complexity.Location.Address == nil {
			break
		}

		return e.complexity.Location.Address(childComplexity), true

	case "Location.company":
		if e.complexity.Location.Company == nil {
			break
		}

		return e.complexity.Location.Company(childComplexity), true

	case "Location.createdAt":
		if e.complexity.Location.CreatedAt == nil {
			break
		}

		return e.complexity.Location.CreatedAt(childComplexity), true

	case "Location.deletedAt":
		if e.complexity.Location.DeletedAt == nil {
			break
		}

		return e.complexity.Location.DeletedAt(childComplexity), true

	case "Location.id":
		if e.complexity.Location.ID == nil {
			break
		}

		return e.complexity.Location.ID(childComplexity), true

	case "Location.name":
		if e.complexity.Location.Name == nil {
			break
		}

		return e.complexity.Location.Name(childComplexity), true

	case "Location.updatedAt":
		if e.complexity.Location.UpdatedAt == nil {
			break
		}

		return e.complexity.Location.UpdatedAt(childComplexity), true

	case "Location.users":
		if e.complexity.Location.Users == nil {
			break
		}

		return e.complexity.Location.Users(childComplexity), true

	case "LocationDeletePayload.id":
		if e.complexity.LocationDeletePayload.ID == nil {
			break
		}

		return e.complexity.LocationDeletePayload.ID(childComplexity), true

	case "LocationPayload.location":
		if e.complexity.LocationPayload.Location == nil {
			break
		}

		return e.complexity.LocationPayload.Location(childComplexity), true

	case "LocationsDeletePayload.ids":
		if e.complexity.LocationsDeletePayload.Ids == nil {
			break
		}

		return e.complexity.LocationsDeletePayload.Ids(childComplexity), true

	case "LocationsPayload.locations":
		if e.complexity.LocationsPayload.Locations == nil {
			break
		}

		return e.complexity.LocationsPayload.Locations(childComplexity), true

	case "LocationsUpdatePayload.ok":
		if e.complexity.LocationsUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.LocationsUpdatePayload.Ok(childComplexity), true

	case "Mutation.createComment":
		if e.complexity.Mutation.CreateComment == nil {
			break
		}

		args, err := ec.field_Mutation_createComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateComment(childComplexity, args["input"].(gqlmodels.CommentCreateInput)), true

	case "Mutation.createComments":
		if e.complexity.Mutation.CreateComments == nil {
			break
		}

		args, err := ec.field_Mutation_createComments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateComments(childComplexity, args["input"].(gqlmodels.CommentsCreateInput)), true

	case "Mutation.createCompanies":
		if e.complexity.Mutation.CreateCompanies == nil {
			break
		}

		args, err := ec.field_Mutation_createCompanies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCompanies(childComplexity, args["input"].(gqlmodels.CompaniesCreateInput)), true

	case "Mutation.createCompany":
		if e.complexity.Mutation.CreateCompany == nil {
			break
		}

		args, err := ec.field_Mutation_createCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCompany(childComplexity, args["input"].(gqlmodels.CompanyCreateInput)), true

	case "Mutation.createFollower":
		if e.complexity.Mutation.CreateFollower == nil {
			break
		}

		args, err := ec.field_Mutation_createFollower_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFollower(childComplexity, args["input"].(gqlmodels.FollowerCreateInput)), true

	case "Mutation.createFollowers":
		if e.complexity.Mutation.CreateFollowers == nil {
			break
		}

		args, err := ec.field_Mutation_createFollowers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFollowers(childComplexity, args["input"].(gqlmodels.FollowersCreateInput)), true

	case "Mutation.createLocation":
		if e.complexity.Mutation.CreateLocation == nil {
			break
		}

		args, err := ec.field_Mutation_createLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLocation(childComplexity, args["input"].(gqlmodels.LocationCreateInput)), true

	case "Mutation.createLocations":
		if e.complexity.Mutation.CreateLocations == nil {
			break
		}

		args, err := ec.field_Mutation_createLocations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLocations(childComplexity, args["input"].(gqlmodels.LocationsCreateInput)), true

	case "Mutation.createPost":
		if e.complexity.Mutation.CreatePost == nil {
			break
		}

		args, err := ec.field_Mutation_createPost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePost(childComplexity, args["input"].(gqlmodels.PostCreateInput)), true

	case "Mutation.createPosts":
		if e.complexity.Mutation.CreatePosts == nil {
			break
		}

		args, err := ec.field_Mutation_createPosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePosts(childComplexity, args["input"].(gqlmodels.PostsCreateInput)), true

	case "Mutation.createRole":
		if e.complexity.Mutation.CreateRole == nil {
			break
		}

		args, err := ec.field_Mutation_createRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRole(childComplexity, args["input"].(gqlmodels.RoleCreateInput)), true

	case "Mutation.createRoles":
		if e.complexity.Mutation.CreateRoles == nil {
			break
		}

		args, err := ec.field_Mutation_createRoles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRoles(childComplexity, args["input"].(gqlmodels.RolesCreateInput)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(gqlmodels.UserCreateInput)), true

	case "Mutation.createUsers":
		if e.complexity.Mutation.CreateUsers == nil {
			break
		}

		args, err := ec.field_Mutation_createUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUsers(childComplexity, args["input"].(gqlmodels.UsersCreateInput)), true

	case "Mutation.deleteComment":
		if e.complexity.Mutation.DeleteComment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteComment(childComplexity, args["id"].(string)), true

	case "Mutation.deleteComments":
		if e.complexity.Mutation.DeleteComments == nil {
			break
		}

		args, err := ec.field_Mutation_deleteComments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteComments(childComplexity, args["filter"].(*gqlmodels.CommentFilter)), true

	case "Mutation.deleteCompanies":
		if e.complexity.Mutation.DeleteCompanies == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCompanies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCompanies(childComplexity, args["filter"].(*gqlmodels.CompanyFilter)), true

	case "Mutation.deleteCompany":
		if e.complexity.Mutation.DeleteCompany == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCompany(childComplexity, args["id"].(string)), true

	case "Mutation.deleteFollower":
		if e.complexity.Mutation.DeleteFollower == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFollower_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFollower(childComplexity, args["id"].(string)), true

	case "Mutation.deleteFollowers":
		if e.complexity.Mutation.DeleteFollowers == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFollowers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFollowers(childComplexity, args["filter"].(*gqlmodels.FollowerFilter)), true

	case "Mutation.deleteLocation":
		if e.complexity.Mutation.DeleteLocation == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLocation(childComplexity, args["id"].(string)), true

	case "Mutation.deleteLocations":
		if e.complexity.Mutation.DeleteLocations == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLocations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLocations(childComplexity, args["filter"].(*gqlmodels.LocationFilter)), true

	case "Mutation.deletePost":
		if e.complexity.Mutation.DeletePost == nil {
			break
		}

		args, err := ec.field_Mutation_deletePost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePost(childComplexity, args["id"].(string)), true

	case "Mutation.deletePosts":
		if e.complexity.Mutation.DeletePosts == nil {
			break
		}

		args, err := ec.field_Mutation_deletePosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePosts(childComplexity, args["filter"].(*gqlmodels.PostFilter)), true

	case "Mutation.deleteRole":
		if e.complexity.Mutation.DeleteRole == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRole(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRoles":
		if e.complexity.Mutation.DeleteRoles == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRoles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRoles(childComplexity, args["filter"].(*gqlmodels.RoleFilter)), true

	case "Mutation.deleteUser":
		if e.complexity.Mutation.DeleteUser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUser(childComplexity, args["id"].(string)), true

	case "Mutation.deleteUsers":
		if e.complexity.Mutation.DeleteUsers == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUsers(childComplexity, args["filter"].(*gqlmodels.UserFilter)), true

	case "Mutation.updateComment":
		if e.complexity.Mutation.UpdateComment == nil {
			break
		}

		args, err := ec.field_Mutation_updateComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateComment(childComplexity, args["id"].(string), args["input"].(gqlmodels.CommentUpdateInput)), true

	case "Mutation.updateComments":
		if e.complexity.Mutation.UpdateComments == nil {
			break
		}

		args, err := ec.field_Mutation_updateComments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateComments(childComplexity, args["filter"].(*gqlmodels.CommentFilter), args["input"].(gqlmodels.CommentsUpdateInput)), true

	case "Mutation.updateCompanies":
		if e.complexity.Mutation.UpdateCompanies == nil {
			break
		}

		args, err := ec.field_Mutation_updateCompanies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCompanies(childComplexity, args["filter"].(*gqlmodels.CompanyFilter), args["input"].(gqlmodels.CompaniesUpdateInput)), true

	case "Mutation.updateCompany":
		if e.complexity.Mutation.UpdateCompany == nil {
			break
		}

		args, err := ec.field_Mutation_updateCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCompany(childComplexity, args["id"].(string), args["input"].(gqlmodels.CompanyUpdateInput)), true

	case "Mutation.updateFollower":
		if e.complexity.Mutation.UpdateFollower == nil {
			break
		}

		args, err := ec.field_Mutation_updateFollower_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFollower(childComplexity, args["id"].(string), args["input"].(gqlmodels.FollowerUpdateInput)), true

	case "Mutation.updateFollowers":
		if e.complexity.Mutation.UpdateFollowers == nil {
			break
		}

		args, err := ec.field_Mutation_updateFollowers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFollowers(childComplexity, args["filter"].(*gqlmodels.FollowerFilter), args["input"].(gqlmodels.FollowersUpdateInput)), true

	case "Mutation.updateLocation":
		if e.complexity.Mutation.UpdateLocation == nil {
			break
		}

		args, err := ec.field_Mutation_updateLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLocation(childComplexity, args["id"].(string), args["input"].(gqlmodels.LocationUpdateInput)), true

	case "Mutation.updateLocations":
		if e.complexity.Mutation.UpdateLocations == nil {
			break
		}

		args, err := ec.field_Mutation_updateLocations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLocations(childComplexity, args["filter"].(*gqlmodels.LocationFilter), args["input"].(gqlmodels.LocationsUpdateInput)), true

	case "Mutation.updatePost":
		if e.complexity.Mutation.UpdatePost == nil {
			break
		}

		args, err := ec.field_Mutation_updatePost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePost(childComplexity, args["id"].(string), args["input"].(gqlmodels.PostUpdateInput)), true

	case "Mutation.updatePosts":
		if e.complexity.Mutation.UpdatePosts == nil {
			break
		}

		args, err := ec.field_Mutation_updatePosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePosts(childComplexity, args["filter"].(*gqlmodels.PostFilter), args["input"].(gqlmodels.PostsUpdateInput)), true

	case "Mutation.updateRole":
		if e.complexity.Mutation.UpdateRole == nil {
			break
		}

		args, err := ec.field_Mutation_updateRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRole(childComplexity, args["id"].(string), args["input"].(gqlmodels.RoleUpdateInput)), true

	case "Mutation.updateRoles":
		if e.complexity.Mutation.UpdateRoles == nil {
			break
		}

		args, err := ec.field_Mutation_updateRoles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRoles(childComplexity, args["filter"].(*gqlmodels.RoleFilter), args["input"].(gqlmodels.RolesUpdateInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["id"].(string), args["input"].(gqlmodels.UserUpdateInput)), true

	case "Mutation.updateUsers":
		if e.complexity.Mutation.UpdateUsers == nil {
			break
		}

		args, err := ec.field_Mutation_updateUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUsers(childComplexity, args["filter"].(*gqlmodels.UserFilter), args["input"].(gqlmodels.UsersUpdateInput)), true

	case "Post.body":
		if e.complexity.Post.Body == nil {
			break
		}

		return e.complexity.Post.Body(childComplexity), true

	case "Post.comments":
		if e.complexity.Post.Comments == nil {
			break
		}

		return e.complexity.Post.Comments(childComplexity), true

	case "Post.createdAt":
		if e.complexity.Post.CreatedAt == nil {
			break
		}

		return e.complexity.Post.CreatedAt(childComplexity), true

	case "Post.deletedAt":
		if e.complexity.Post.DeletedAt == nil {
			break
		}

		return e.complexity.Post.DeletedAt(childComplexity), true

	case "Post.id":
		if e.complexity.Post.ID == nil {
			break
		}

		return e.complexity.Post.ID(childComplexity), true

	case "Post.title":
		if e.complexity.Post.Title == nil {
			break
		}

		return e.complexity.Post.Title(childComplexity), true

	case "Post.updatedAt":
		if e.complexity.Post.UpdatedAt == nil {
			break
		}

		return e.complexity.Post.UpdatedAt(childComplexity), true

	case "Post.user":
		if e.complexity.Post.User == nil {
			break
		}

		return e.complexity.Post.User(childComplexity), true

	case "PostDeletePayload.id":
		if e.complexity.PostDeletePayload.ID == nil {
			break
		}

		return e.complexity.PostDeletePayload.ID(childComplexity), true

	case "PostPayload.post":
		if e.complexity.PostPayload.Post == nil {
			break
		}

		return e.complexity.PostPayload.Post(childComplexity), true

	case "PostsDeletePayload.ids":
		if e.complexity.PostsDeletePayload.Ids == nil {
			break
		}

		return e.complexity.PostsDeletePayload.Ids(childComplexity), true

	case "PostsPayload.posts":
		if e.complexity.PostsPayload.Posts == nil {
			break
		}

		return e.complexity.PostsPayload.Posts(childComplexity), true

	case "PostsUpdatePayload.ok":
		if e.complexity.PostsUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.PostsUpdatePayload.Ok(childComplexity), true

	case "Query.comment":
		if e.complexity.Query.Comment == nil {
			break
		}

		args, err := ec.field_Query_comment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Comment(childComplexity, args["id"].(string)), true

	case "Query.comments":
		if e.complexity.Query.Comments == nil {
			break
		}

		args, err := ec.field_Query_comments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Comments(childComplexity, args["filter"].(*gqlmodels.CommentFilter)), true

	case "Query.companies":
		if e.complexity.Query.Companies == nil {
			break
		}

		args, err := ec.field_Query_companies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Companies(childComplexity, args["filter"].(*gqlmodels.CompanyFilter)), true

	case "Query.company":
		if e.complexity.Query.Company == nil {
			break
		}

		args, err := ec.field_Query_company_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Company(childComplexity, args["id"].(string)), true

	case "Query.follower":
		if e.complexity.Query.Follower == nil {
			break
		}

		args, err := ec.field_Query_follower_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Follower(childComplexity, args["id"].(string)), true

	case "Query.followers":
		if e.complexity.Query.Followers == nil {
			break
		}

		args, err := ec.field_Query_followers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Followers(childComplexity, args["filter"].(*gqlmodels.FollowerFilter)), true

	case "Query.location":
		if e.complexity.Query.Location == nil {
			break
		}

		args, err := ec.field_Query_location_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Location(childComplexity, args["id"].(string)), true

	case "Query.locations":
		if e.complexity.Query.Locations == nil {
			break
		}

		args, err := ec.field_Query_locations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Locations(childComplexity, args["filter"].(*gqlmodels.LocationFilter)), true

	case "Query.post":
		if e.complexity.Query.Post == nil {
			break
		}

		args, err := ec.field_Query_post_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Post(childComplexity, args["id"].(string)), true

	case "Query.posts":
		if e.complexity.Query.Posts == nil {
			break
		}

		args, err := ec.field_Query_posts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Posts(childComplexity, args["filter"].(*gqlmodels.PostFilter)), true

	case "Query.role":
		if e.complexity.Query.Role == nil {
			break
		}

		args, err := ec.field_Query_role_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Role(childComplexity, args["id"].(string)), true

	case "Query.roles":
		if e.complexity.Query.Roles == nil {
			break
		}

		args, err := ec.field_Query_roles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Roles(childComplexity, args["filter"].(*gqlmodels.RoleFilter)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(string)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["filter"].(*gqlmodels.UserFilter)), true

	case "Role.accessLevel":
		if e.complexity.Role.AccessLevel == nil {
			break
		}

		return e.complexity.Role.AccessLevel(childComplexity), true

	case "Role.createdAt":
		if e.complexity.Role.CreatedAt == nil {
			break
		}

		return e.complexity.Role.CreatedAt(childComplexity), true

	case "Role.deletedAt":
		if e.complexity.Role.DeletedAt == nil {
			break
		}

		return e.complexity.Role.DeletedAt(childComplexity), true

	case "Role.id":
		if e.complexity.Role.ID == nil {
			break
		}

		return e.complexity.Role.ID(childComplexity), true

	case "Role.name":
		if e.complexity.Role.Name == nil {
			break
		}

		return e.complexity.Role.Name(childComplexity), true

	case "Role.updatedAt":
		if e.complexity.Role.UpdatedAt == nil {
			break
		}

		return e.complexity.Role.UpdatedAt(childComplexity), true

	case "Role.users":
		if e.complexity.Role.Users == nil {
			break
		}

		return e.complexity.Role.Users(childComplexity), true

	case "RoleDeletePayload.id":
		if e.complexity.RoleDeletePayload.ID == nil {
			break
		}

		return e.complexity.RoleDeletePayload.ID(childComplexity), true

	case "RolePayload.role":
		if e.complexity.RolePayload.Role == nil {
			break
		}

		return e.complexity.RolePayload.Role(childComplexity), true

	case "RolesDeletePayload.ids":
		if e.complexity.RolesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.RolesDeletePayload.Ids(childComplexity), true

	case "RolesPayload.roles":
		if e.complexity.RolesPayload.Roles == nil {
			break
		}

		return e.complexity.RolesPayload.Roles(childComplexity), true

	case "RolesUpdatePayload.ok":
		if e.complexity.RolesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.RolesUpdatePayload.Ok(childComplexity), true

	case "User.active":
		if e.complexity.User.Active == nil {
			break
		}

		return e.complexity.User.Active(childComplexity), true

	case "User.address":
		if e.complexity.User.Address == nil {
			break
		}

		return e.complexity.User.Address(childComplexity), true

	case "User.comments":
		if e.complexity.User.Comments == nil {
			break
		}

		return e.complexity.User.Comments(childComplexity), true

	case "User.company":
		if e.complexity.User.Company == nil {
			break
		}

		return e.complexity.User.Company(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.deletedAt":
		if e.complexity.User.DeletedAt == nil {
			break
		}

		return e.complexity.User.DeletedAt(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.followeeFollowers":
		if e.complexity.User.FolloweeFollowers == nil {
			break
		}

		return e.complexity.User.FolloweeFollowers(childComplexity), true

	case "User.followerFollowers":
		if e.complexity.User.FollowerFollowers == nil {
			break
		}

		return e.complexity.User.FollowerFollowers(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.lastLogin":
		if e.complexity.User.LastLogin == nil {
			break
		}

		return e.complexity.User.LastLogin(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.lastPasswordChange":
		if e.complexity.User.LastPasswordChange == nil {
			break
		}

		return e.complexity.User.LastPasswordChange(childComplexity), true

	case "User.location":
		if e.complexity.User.Location == nil {
			break
		}

		return e.complexity.User.Location(childComplexity), true

	case "User.mobile":
		if e.complexity.User.Mobile == nil {
			break
		}

		return e.complexity.User.Mobile(childComplexity), true

	case "User.password":
		if e.complexity.User.Password == nil {
			break
		}

		return e.complexity.User.Password(childComplexity), true

	case "User.phone":
		if e.complexity.User.Phone == nil {
			break
		}

		return e.complexity.User.Phone(childComplexity), true

	case "User.posts":
		if e.complexity.User.Posts == nil {
			break
		}

		return e.complexity.User.Posts(childComplexity), true

	case "User.role":
		if e.complexity.User.Role == nil {
			break
		}

		return e.complexity.User.Role(childComplexity), true

	case "User.token":
		if e.complexity.User.Token == nil {
			break
		}

		return e.complexity.User.Token(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	case "UserDeletePayload.id":
		if e.complexity.UserDeletePayload.ID == nil {
			break
		}

		return e.complexity.UserDeletePayload.ID(childComplexity), true

	case "UserPayload.user":
		if e.complexity.UserPayload.User == nil {
			break
		}

		return e.complexity.UserPayload.User(childComplexity), true

	case "UsersDeletePayload.ids":
		if e.complexity.UsersDeletePayload.Ids == nil {
			break
		}

		return e.complexity.UsersDeletePayload.Ids(childComplexity), true

	case "UsersPayload.users":
		if e.complexity.UsersPayload.Users == nil {
			break
		}

		return e.complexity.UsersPayload.Users(childComplexity), true

	case "UsersUpdatePayload.ok":
		if e.complexity.UsersUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.UsersUpdatePayload.Ok(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	&ast.Source{Name: "schema.graphql", Input: `type Comment {
  id: ID!
  user: User!
  post: Post!
  title: String!
  body: String!
  deletedAt: Int
  createdAt: Int
  updatedAt: Int
}

type Company {
  id: ID!
  name: String
  active: Boolean
  createdAt: Int
  deletedAt: Int
  updatedAt: Int
  locations: [Location]
  users: [User]
}

type Follower {
  follower: User!
  followee: User!
  updatedAt: Int
  deletedAt: Int
  createdAt: Int
}

type Location {
  id: ID!
  name: String
  active: Boolean
  address: String
  company: Company!
  createdAt: Int
  deletedAt: Int
  updatedAt: Int
  users: [User]
}

type Post {
  id: ID!
  user: User!
  title: String!
  body: String!
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
  comments: [Comment]
}

type Role {
  id: ID!
  accessLevel: Int!
  name: String!
  deletedAt: Int
  createdAt: Int
  updatedAt: Int
  users: [User]
}

type User {
  id: ID!
  firstName: String
  lastName: String
  username: String
  password: String
  email: String
  mobile: String
  phone: String
  address: String
  active: Boolean
  lastLogin: Int
  lastPasswordChange: Int
  token: String
  role: Role
  company: Company
  location: Location
  updatedAt: Int
  createdAt: Int
  deletedAt: Int
  comments: [Comment]
  followeeFollowers: [Follower]
  followerFollowers: [Follower]
  posts: [Post]
}

input IDFilter {
  equalTo: ID
  notEqualTo: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFilter {
  equalTo: String
  notEqualTo: String

  in: [String!]
  notIn: [String!]

  startWith: String
  notStartWith: String

  endWith: String
  notEndWith: String

  contain: String
  notContain: String

  startWithStrict: String # Camel sensitive
  notStartWithStrict: String # Camel sensitive
  endWithStrict: String # Camel sensitive
  notEndWithStrict: String # Camel sensitive
  containStrict: String # Camel sensitive
  notContainStrict: String # Camel sensitive
}

input IntFilter {
  equalTo: Int
  notEqualTo: Int
  lessThan: Int
  lessThanOrEqualTo: Int
  moreThan: Int
  moreThanOrEqualTo: Int
  in: [Int!]
  notIn: [Int!]
}

input FloatFilter {
  equalTo: Float
  notEqualTo: Float
  lessThan: Float
  lessThanOrEqualTo: Float
  moreThan: Float
  moreThanOrEqualTo: Float
  in: [Float!]
  notIn: [Float!]
}

input BooleanFilter {
  isTrue: Boolean
  isFalse: Boolean
  isNull: Boolean
}

input CommentFilter {
  search: String
  where: CommentWhere
}

input CommentWhere {
  id: IDFilter
  user: UserWhere
  post: PostWhere
  title: StringFilter
  body: StringFilter
  deletedAt: IntFilter
  createdAt: IntFilter
  updatedAt: IntFilter
  or: CommentWhere
  and: CommentWhere
}

input CompanyFilter {
  search: String
  where: CompanyWhere
}

input CompanyWhere {
  id: IDFilter
  name: StringFilter
  active: BooleanFilter
  createdAt: IntFilter
  deletedAt: IntFilter
  updatedAt: IntFilter
  locations: LocationWhere
  users: UserWhere
  or: CompanyWhere
  and: CompanyWhere
}

input FollowerFilter {
  search: String
  where: FollowerWhere
}

input FollowerWhere {
  follower: UserWhere
  followee: UserWhere
  updatedAt: IntFilter
  deletedAt: IntFilter
  createdAt: IntFilter
  or: FollowerWhere
  and: FollowerWhere
}

input LocationFilter {
  search: String
  where: LocationWhere
}

input LocationWhere {
  id: IDFilter
  name: StringFilter
  active: BooleanFilter
  address: StringFilter
  company: CompanyWhere
  createdAt: IntFilter
  deletedAt: IntFilter
  updatedAt: IntFilter
  users: UserWhere
  or: LocationWhere
  and: LocationWhere
}

input PostFilter {
  search: String
  where: PostWhere
}

input PostWhere {
  id: IDFilter
  user: UserWhere
  title: StringFilter
  body: StringFilter
  createdAt: IntFilter
  updatedAt: IntFilter
  deletedAt: IntFilter
  comments: CommentWhere
  or: PostWhere
  and: PostWhere
}

input RoleFilter {
  search: String
  where: RoleWhere
}

input RoleWhere {
  id: IDFilter
  accessLevel: IntFilter
  name: StringFilter
  deletedAt: IntFilter
  createdAt: IntFilter
  updatedAt: IntFilter
  users: UserWhere
  or: RoleWhere
  and: RoleWhere
}

input UserFilter {
  search: String
  where: UserWhere
}

input UserWhere {
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  username: StringFilter
  password: StringFilter
  email: StringFilter
  mobile: StringFilter
  phone: StringFilter
  address: StringFilter
  active: BooleanFilter
  lastLogin: IntFilter
  lastPasswordChange: IntFilter
  token: StringFilter
  role: RoleWhere
  company: CompanyWhere
  location: LocationWhere
  updatedAt: IntFilter
  createdAt: IntFilter
  deletedAt: IntFilter
  comments: CommentWhere
  followeeFollowers: FollowerWhere
  followerFollowers: FollowerWhere
  posts: PostWhere
  or: UserWhere
  and: UserWhere
}

type Query {
  comment(id: ID!): Comment!
  comments(filter: CommentFilter): [Comment!]!
  company(id: ID!): Company!
  companies(filter: CompanyFilter): [Company!]!
  follower(id: ID!): Follower!
  followers(filter: FollowerFilter): [Follower!]!
  location(id: ID!): Location!
  locations(filter: LocationFilter): [Location!]!
  post(id: ID!): Post!
  posts(filter: PostFilter): [Post!]!
  role(id: ID!): Role!
  roles(filter: RoleFilter): [Role!]!
  user(id: ID!): User!
  users(filter: UserFilter): [User!]!
}

input CommentCreateInput {
  userId: ID!
  postId: ID!
  title: String!
  body: String!
  deletedAt: Int
  createdAt: Int
  updatedAt: Int
}

input CommentUpdateInput {
  userId: ID
  postId: ID
  title: String
  body: String
  deletedAt: Int
  createdAt: Int
  updatedAt: Int
}

input CommentsCreateInput {
  comments: [CommentCreateInput!]!
}

input CommentsUpdateInput {
  comments: [CommentUpdateInput!]!
}

type CommentPayload {
  comment: Comment!
}

type CommentDeletePayload {
  id: ID!
}

type CommentsPayload {
  comments: [Comment!]!
}

type CommentsDeletePayload {
  ids: [ID!]!
}

type CommentsUpdatePayload {
  ok: Boolean!
}

input CompanyCreateInput {
  name: String
  active: Boolean
  createdAt: Int
  deletedAt: Int
  updatedAt: Int
}

input CompanyUpdateInput {
  name: String
  active: Boolean
  createdAt: Int
  deletedAt: Int
  updatedAt: Int
}

input CompaniesCreateInput {
  companies: [CompanyCreateInput!]!
}

input CompaniesUpdateInput {
  companies: [CompanyUpdateInput!]!
}

type CompanyPayload {
  company: Company!
}

type CompanyDeletePayload {
  id: ID!
}

type CompaniesPayload {
  companies: [Company!]!
}

type CompaniesDeletePayload {
  ids: [ID!]!
}

type CompaniesUpdatePayload {
  ok: Boolean!
}

input FollowerCreateInput {
  followerId: ID!
  followeeId: ID!
  updatedAt: Int
  deletedAt: Int
  createdAt: Int
}

input FollowerUpdateInput {
  followerId: ID
  followeeId: ID
  updatedAt: Int
  deletedAt: Int
  createdAt: Int
}

input FollowersCreateInput {
  followers: [FollowerCreateInput!]!
}

input FollowersUpdateInput {
  followers: [FollowerUpdateInput!]!
}

type FollowerPayload {
  follower: Follower!
}

type FollowerDeletePayload {
  id: ID!
}

type FollowersPayload {
  followers: [Follower!]!
}

type FollowersDeletePayload {
  ids: [ID!]!
}

type FollowersUpdatePayload {
  ok: Boolean!
}

input LocationCreateInput {
  name: String
  active: Boolean
  address: String
  companyId: ID!
  createdAt: Int
  deletedAt: Int
  updatedAt: Int
}

input LocationUpdateInput {
  name: String
  active: Boolean
  address: String
  companyId: ID
  createdAt: Int
  deletedAt: Int
  updatedAt: Int
}

input LocationsCreateInput {
  locations: [LocationCreateInput!]!
}

input LocationsUpdateInput {
  locations: [LocationUpdateInput!]!
}

type LocationPayload {
  location: Location!
}

type LocationDeletePayload {
  id: ID!
}

type LocationsPayload {
  locations: [Location!]!
}

type LocationsDeletePayload {
  ids: [ID!]!
}

type LocationsUpdatePayload {
  ok: Boolean!
}

input PostCreateInput {
  userId: ID!
  title: String!
  body: String!
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

input PostUpdateInput {
  userId: ID
  title: String
  body: String
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

input PostsCreateInput {
  posts: [PostCreateInput!]!
}

input PostsUpdateInput {
  posts: [PostUpdateInput!]!
}

type PostPayload {
  post: Post!
}

type PostDeletePayload {
  id: ID!
}

type PostsPayload {
  posts: [Post!]!
}

type PostsDeletePayload {
  ids: [ID!]!
}

type PostsUpdatePayload {
  ok: Boolean!
}

input RoleCreateInput {
  accessLevel: Int!
  name: String!
  deletedAt: Int
  createdAt: Int
  updatedAt: Int
}

input RoleUpdateInput {
  accessLevel: Int
  name: String
  deletedAt: Int
  createdAt: Int
  updatedAt: Int
}

input RolesCreateInput {
  roles: [RoleCreateInput!]!
}

input RolesUpdateInput {
  roles: [RoleUpdateInput!]!
}

type RolePayload {
  role: Role!
}

type RoleDeletePayload {
  id: ID!
}

type RolesPayload {
  roles: [Role!]!
}

type RolesDeletePayload {
  ids: [ID!]!
}

type RolesUpdatePayload {
  ok: Boolean!
}

input UserCreateInput {
  firstName: String
  lastName: String
  username: String
  password: String
  email: String
  mobile: String
  phone: String
  address: String
  active: Boolean
  lastLogin: Int
  lastPasswordChange: Int
  token: String
  roleId: ID
  companyId: ID
  locationId: ID
  updatedAt: Int
  createdAt: Int
  deletedAt: Int
}

input UserUpdateInput {
  firstName: String
  lastName: String
  username: String
  password: String
  email: String
  mobile: String
  phone: String
  address: String
  active: Boolean
  lastLogin: Int
  lastPasswordChange: Int
  token: String
  roleId: ID
  companyId: ID
  locationId: ID
  updatedAt: Int
  createdAt: Int
  deletedAt: Int
}

input UsersCreateInput {
  users: [UserCreateInput!]!
}

input UsersUpdateInput {
  users: [UserUpdateInput!]!
}

type UserPayload {
  user: User!
}

type UserDeletePayload {
  id: ID!
}

type UsersPayload {
  users: [User!]!
}

type UsersDeletePayload {
  ids: [ID!]!
}

type UsersUpdatePayload {
  ok: Boolean!
}

type Mutation {
  createComment(input: CommentCreateInput!): CommentPayload!
  createComments(input: CommentsCreateInput!): CommentsPayload!
  updateComment(id: ID!, input: CommentUpdateInput!): CommentPayload!
  updateComments(
    filter: CommentFilter
    input: CommentsUpdateInput!
  ): CommentsUpdatePayload!
  deleteComment(id: ID!): CommentDeletePayload!
  deleteComments(filter: CommentFilter): CommentsDeletePayload!
  createCompany(input: CompanyCreateInput!): CompanyPayload!
  createCompanies(input: CompaniesCreateInput!): CompaniesPayload!
  updateCompany(id: ID!, input: CompanyUpdateInput!): CompanyPayload!
  updateCompanies(
    filter: CompanyFilter
    input: CompaniesUpdateInput!
  ): CompaniesUpdatePayload!
  deleteCompany(id: ID!): CompanyDeletePayload!
  deleteCompanies(filter: CompanyFilter): CompaniesDeletePayload!
  createFollower(input: FollowerCreateInput!): FollowerPayload!
  createFollowers(input: FollowersCreateInput!): FollowersPayload!
  updateFollower(id: ID!, input: FollowerUpdateInput!): FollowerPayload!
  updateFollowers(
    filter: FollowerFilter
    input: FollowersUpdateInput!
  ): FollowersUpdatePayload!
  deleteFollower(id: ID!): FollowerDeletePayload!
  deleteFollowers(filter: FollowerFilter): FollowersDeletePayload!
  createLocation(input: LocationCreateInput!): LocationPayload!
  createLocations(input: LocationsCreateInput!): LocationsPayload!
  updateLocation(id: ID!, input: LocationUpdateInput!): LocationPayload!
  updateLocations(
    filter: LocationFilter
    input: LocationsUpdateInput!
  ): LocationsUpdatePayload!
  deleteLocation(id: ID!): LocationDeletePayload!
  deleteLocations(filter: LocationFilter): LocationsDeletePayload!
  createPost(input: PostCreateInput!): PostPayload!
  createPosts(input: PostsCreateInput!): PostsPayload!
  updatePost(id: ID!, input: PostUpdateInput!): PostPayload!
  updatePosts(filter: PostFilter, input: PostsUpdateInput!): PostsUpdatePayload!
  deletePost(id: ID!): PostDeletePayload!
  deletePosts(filter: PostFilter): PostsDeletePayload!
  createRole(input: RoleCreateInput!): RolePayload!
  createRoles(input: RolesCreateInput!): RolesPayload!
  updateRole(id: ID!, input: RoleUpdateInput!): RolePayload!
  updateRoles(filter: RoleFilter, input: RolesUpdateInput!): RolesUpdatePayload!
  deleteRole(id: ID!): RoleDeletePayload!
  deleteRoles(filter: RoleFilter): RolesDeletePayload!
  createUser(input: UserCreateInput!): UserPayload!
  createUsers(input: UsersCreateInput!): UsersPayload!
  updateUser(id: ID!, input: UserUpdateInput!): UserPayload!
  updateUsers(filter: UserFilter, input: UsersUpdateInput!): UsersUpdatePayload!
  deleteUser(id: ID!): UserDeletePayload!
  deleteUsers(filter: UserFilter): UsersDeletePayload!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.CommentCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCommentCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createComments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.CommentsCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCommentsCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentsCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCompanies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.CompaniesCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCompaniesCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompaniesCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.CompanyCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCompanyCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFollower_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.FollowerCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNFollowerCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFollowers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.FollowersCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNFollowersCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowersCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.LocationCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNLocationCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLocations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.LocationsCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNLocationsCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationsCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.PostCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNPostCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPosts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.PostsCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNPostsCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostsCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.RoleCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRoleCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRoles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.RolesCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRolesCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolesCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.UserCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUserCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodels.UsersCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUsersCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUsersCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteComments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCommentFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCompanies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.CompanyFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCompanyFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFollower_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFollowers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.FollowerFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOFollowerFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLocations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.LocationFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLocationFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePosts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.PostFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOPostFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRoles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.RoleFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORoleFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodels.CommentUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNCommentUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateComments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCommentFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 gqlmodels.CommentsUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNCommentsUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentsUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCompanies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.CompanyFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCompanyFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 gqlmodels.CompaniesUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNCompaniesUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompaniesUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodels.CompanyUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNCompanyUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFollower_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodels.FollowerUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNFollowerUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFollowers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.FollowerFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOFollowerFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 gqlmodels.FollowersUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNFollowersUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowersUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodels.LocationUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNLocationUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLocations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.LocationFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLocationFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 gqlmodels.LocationsUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNLocationsUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationsUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodels.PostUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNPostUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePosts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.PostFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOPostFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 gqlmodels.PostsUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNPostsUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostsUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodels.RoleUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRoleUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRoles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.RoleFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORoleFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 gqlmodels.RolesUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRolesUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolesUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodels.UserUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUserUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 gqlmodels.UsersUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUsersUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUsersUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_comments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCommentFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_companies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.CompanyFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCompanyFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_company_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_follower_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_followers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.FollowerFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOFollowerFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_location_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_locations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.LocationFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLocationFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_post_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_posts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.PostFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOPostFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_role_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_roles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.RoleFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORoleFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodels.UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Comment_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_user(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_post(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Post)
	fc.Result = res
	return ec.marshalNPost2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_title(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_body(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_createdAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.CommentDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentPayload_comment(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.CommentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentsDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.CommentsDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentsDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentsPayload_comments(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.CommentsPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentsPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentsUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.CommentsUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentsUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CompaniesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.CompaniesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CompaniesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CompaniesPayload_companies(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.CompaniesPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CompaniesPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Companies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CompaniesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.CompaniesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CompaniesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_active(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_createdAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_locations(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Location)
	fc.Result = res
	return ec.marshalOLocation2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_users(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Company) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.CompanyDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CompanyDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyPayload_company(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.CompanyPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CompanyPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) _Follower_follower(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Follower) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Follower",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Follower, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Follower_followee(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Follower) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Follower",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Followee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Follower_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Follower) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Follower",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Follower_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Follower) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Follower",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Follower_createdAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Follower) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Follower",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _FollowerDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.FollowerDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FollowerDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FollowerPayload_follower(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.FollowerPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FollowerPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Follower, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Follower)
	fc.Result = res
	return ec.marshalNFollower2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollower(ctx, field.Selections, res)
}

func (ec *executionContext) _FollowersDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.FollowersDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FollowersDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FollowersPayload_followers(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.FollowersPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FollowersPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Followers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Follower)
	fc.Result = res
	return ec.marshalNFollower2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FollowersUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.FollowersUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FollowersUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Location",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Location",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_active(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Location",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_address(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Location",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_company(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Location",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_createdAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Location",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Location",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Location",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_users(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Location",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _LocationDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.LocationDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LocationDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LocationPayload_location(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.LocationPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LocationPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _LocationsDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.LocationsDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LocationsDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LocationsPayload_locations(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.LocationsPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LocationsPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LocationsUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.LocationsUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LocationsUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateComment(rctx, args["input"].(gqlmodels.CommentCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.CommentPayload)
	fc.Result = res
	return ec.marshalNCommentPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createComments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createComments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateComments(rctx, args["input"].(gqlmodels.CommentsCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.CommentsPayload)
	fc.Result = res
	return ec.marshalNCommentsPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateComment(rctx, args["id"].(string), args["input"].(gqlmodels.CommentUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.CommentPayload)
	fc.Result = res
	return ec.marshalNCommentPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateComments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateComments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateComments(rctx, args["filter"].(*gqlmodels.CommentFilter), args["input"].(gqlmodels.CommentsUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.CommentsUpdatePayload)
	fc.Result = res
	return ec.marshalNCommentsUpdatePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteComment(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.CommentDeletePayload)
	fc.Result = res
	return ec.marshalNCommentDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteComments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteComments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteComments(rctx, args["filter"].(*gqlmodels.CommentFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.CommentsDeletePayload)
	fc.Result = res
	return ec.marshalNCommentsDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentsDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createCompany_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCompany(rctx, args["input"].(gqlmodels.CompanyCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.CompanyPayload)
	fc.Result = res
	return ec.marshalNCompanyPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createCompanies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createCompanies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCompanies(rctx, args["input"].(gqlmodels.CompaniesCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.CompaniesPayload)
	fc.Result = res
	return ec.marshalNCompaniesPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompaniesPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateCompany_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCompany(rctx, args["id"].(string), args["input"].(gqlmodels.CompanyUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.CompanyPayload)
	fc.Result = res
	return ec.marshalNCompanyPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateCompanies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateCompanies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCompanies(rctx, args["filter"].(*gqlmodels.CompanyFilter), args["input"].(gqlmodels.CompaniesUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.CompaniesUpdatePayload)
	fc.Result = res
	return ec.marshalNCompaniesUpdatePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompaniesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteCompany_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCompany(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.CompanyDeletePayload)
	fc.Result = res
	return ec.marshalNCompanyDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteCompanies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteCompanies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCompanies(rctx, args["filter"].(*gqlmodels.CompanyFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.CompaniesDeletePayload)
	fc.Result = res
	return ec.marshalNCompaniesDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompaniesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFollower(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFollower_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFollower(rctx, args["input"].(gqlmodels.FollowerCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.FollowerPayload)
	fc.Result = res
	return ec.marshalNFollowerPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFollowers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFollowers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFollowers(rctx, args["input"].(gqlmodels.FollowersCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.FollowersPayload)
	fc.Result = res
	return ec.marshalNFollowersPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowersPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFollower(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFollower_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateFollower(rctx, args["id"].(string), args["input"].(gqlmodels.FollowerUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.FollowerPayload)
	fc.Result = res
	return ec.marshalNFollowerPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFollowers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFollowers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateFollowers(rctx, args["filter"].(*gqlmodels.FollowerFilter), args["input"].(gqlmodels.FollowersUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.FollowersUpdatePayload)
	fc.Result = res
	return ec.marshalNFollowersUpdatePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowersUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFollower(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFollower_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteFollower(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.FollowerDeletePayload)
	fc.Result = res
	return ec.marshalNFollowerDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFollowers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFollowers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteFollowers(rctx, args["filter"].(*gqlmodels.FollowerFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.FollowersDeletePayload)
	fc.Result = res
	return ec.marshalNFollowersDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowersDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createLocation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateLocation(rctx, args["input"].(gqlmodels.LocationCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.LocationPayload)
	fc.Result = res
	return ec.marshalNLocationPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createLocations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createLocations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateLocations(rctx, args["input"].(gqlmodels.LocationsCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.LocationsPayload)
	fc.Result = res
	return ec.marshalNLocationsPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLocation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLocation(rctx, args["id"].(string), args["input"].(gqlmodels.LocationUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.LocationPayload)
	fc.Result = res
	return ec.marshalNLocationPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLocations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLocations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLocations(rctx, args["filter"].(*gqlmodels.LocationFilter), args["input"].(gqlmodels.LocationsUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.LocationsUpdatePayload)
	fc.Result = res
	return ec.marshalNLocationsUpdatePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLocation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLocation(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.LocationDeletePayload)
	fc.Result = res
	return ec.marshalNLocationDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLocations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLocations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLocations(rctx, args["filter"].(*gqlmodels.LocationFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.LocationsDeletePayload)
	fc.Result = res
	return ec.marshalNLocationsDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationsDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePost(rctx, args["input"].(gqlmodels.PostCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.PostPayload)
	fc.Result = res
	return ec.marshalNPostPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPosts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPosts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePosts(rctx, args["input"].(gqlmodels.PostsCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.PostsPayload)
	fc.Result = res
	return ec.marshalNPostsPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePost(rctx, args["id"].(string), args["input"].(gqlmodels.PostUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.PostPayload)
	fc.Result = res
	return ec.marshalNPostPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePosts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePosts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePosts(rctx, args["filter"].(*gqlmodels.PostFilter), args["input"].(gqlmodels.PostsUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.PostsUpdatePayload)
	fc.Result = res
	return ec.marshalNPostsUpdatePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePost(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.PostDeletePayload)
	fc.Result = res
	return ec.marshalNPostDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePosts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePosts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePosts(rctx, args["filter"].(*gqlmodels.PostFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.PostsDeletePayload)
	fc.Result = res
	return ec.marshalNPostsDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostsDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRole(rctx, args["input"].(gqlmodels.RoleCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.RolePayload)
	fc.Result = res
	return ec.marshalNRolePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRoles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRoles_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRoles(rctx, args["input"].(gqlmodels.RolesCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.RolesPayload)
	fc.Result = res
	return ec.marshalNRolesPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolesPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRole(rctx, args["id"].(string), args["input"].(gqlmodels.RoleUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.RolePayload)
	fc.Result = res
	return ec.marshalNRolePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRoles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRoles_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRoles(rctx, args["filter"].(*gqlmodels.RoleFilter), args["input"].(gqlmodels.RolesUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.RolesUpdatePayload)
	fc.Result = res
	return ec.marshalNRolesUpdatePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRole(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.RoleDeletePayload)
	fc.Result = res
	return ec.marshalNRoleDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRoles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRoles_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRoles(rctx, args["filter"].(*gqlmodels.RoleFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.RolesDeletePayload)
	fc.Result = res
	return ec.marshalNRolesDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUser(rctx, args["input"].(gqlmodels.UserCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.UserPayload)
	fc.Result = res
	return ec.marshalNUserPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createUsers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUsers(rctx, args["input"].(gqlmodels.UsersCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.UsersPayload)
	fc.Result = res
	return ec.marshalNUsersPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUsersPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, args["id"].(string), args["input"].(gqlmodels.UserUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.UserPayload)
	fc.Result = res
	return ec.marshalNUserPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUsers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUsers(rctx, args["filter"].(*gqlmodels.UserFilter), args["input"].(gqlmodels.UsersUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.UsersUpdatePayload)
	fc.Result = res
	return ec.marshalNUsersUpdatePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUsersUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUser(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.UserDeletePayload)
	fc.Result = res
	return ec.marshalNUserDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteUsers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUsers(rctx, args["filter"].(*gqlmodels.UserFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.UsersDeletePayload)
	fc.Result = res
	return ec.marshalNUsersDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUsersDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_user(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_title(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_body(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_createdAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_comments(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _PostDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PostDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PostDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PostPayload_post(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PostPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Post)
	fc.Result = res
	return ec.marshalNPost2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) _PostsDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PostsDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PostsDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PostsPayload_posts(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PostsPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PostsPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Posts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Post)
	fc.Result = res
	return ec.marshalNPost2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PostsUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.PostsUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PostsUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_comment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_comment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Comment(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_comments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_comments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Comments(rctx, args["filter"].(*gqlmodels.CommentFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_company(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_company_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Company(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_companies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_companies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Companies(rctx, args["filter"].(*gqlmodels.CompanyFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_follower(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_follower_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Follower(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Follower)
	fc.Result = res
	return ec.marshalNFollower2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollower(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_followers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_followers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Followers(rctx, args["filter"].(*gqlmodels.FollowerFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Follower)
	fc.Result = res
	return ec.marshalNFollower2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_location(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_location_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Location(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_locations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_locations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Locations(rctx, args["filter"].(*gqlmodels.LocationFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_post(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_post_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Post(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Post)
	fc.Result = res
	return ec.marshalNPost2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_posts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_posts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Posts(rctx, args["filter"].(*gqlmodels.PostFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Post)
	fc.Result = res
	return ec.marshalNPost2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_role(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_role_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Role(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Role)
	fc.Result = res
	return ec.marshalNRole2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_roles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_roles_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Roles(rctx, args["filter"].(*gqlmodels.RoleFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Role)
	fc.Result = res
	return ec.marshalNRole2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().User(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_users_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx, args["filter"].(*gqlmodels.UserFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_accessLevel(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_createdAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_users(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Role",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _RoleDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.RoleDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RoleDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RolePayload_role(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.RolePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RolePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Role)
	fc.Result = res
	return ec.marshalNRole2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _RolesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.RolesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RolesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RolesPayload_roles(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.RolesPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RolesPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Role)
	fc.Result = res
	return ec.marshalNRole2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RolesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.RolesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RolesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_firstName(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_lastName(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_password(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_mobile(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_phone(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_address(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_active(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _User_lastLogin(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastLogin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _User_lastPasswordChange(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastPasswordChange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _User_token(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_role(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Role)
	fc.Result = res
	return ec.marshalORole2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _User_company(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Company)
	fc.Result = res
	return ec.marshalOCompany2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) _User_location(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.Location)
	fc.Result = res
	return ec.marshalOLocation2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _User_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _User_comments(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _User_followeeFollowers(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FolloweeFollowers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Follower)
	fc.Result = res
	return ec.marshalOFollower2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollower(ctx, field.Selections, res)
}

func (ec *executionContext) _User_followerFollowers(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowerFollowers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Follower)
	fc.Result = res
	return ec.marshalOFollower2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollower(ctx, field.Selections, res)
}

func (ec *executionContext) _User_posts(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Posts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.Post)
	fc.Result = res
	return ec.marshalOPost2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) _UserDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.UserDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserPayload_user(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.UserPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodels.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UsersDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.UsersDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UsersDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UsersPayload_users(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.UsersPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UsersPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodels.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UsersUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodels.UsersUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UsersUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBooleanFilter(ctx context.Context, obj interface{}) (gqlmodels.BooleanFilter, error) {
	var it gqlmodels.BooleanFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "isTrue":
			var err error
			it.IsTrue, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isFalse":
			var err error
			it.IsFalse, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isNull":
			var err error
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentCreateInput(ctx context.Context, obj interface{}) (gqlmodels.CommentCreateInput, error) {
	var it gqlmodels.CommentCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId":
			var err error
			it.PostID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "body":
			var err error
			it.Body, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentFilter(ctx context.Context, obj interface{}) (gqlmodels.CommentFilter, error) {
	var it gqlmodels.CommentFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOCommentWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentUpdateInput(ctx context.Context, obj interface{}) (gqlmodels.CommentUpdateInput, error) {
	var it gqlmodels.CommentUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId":
			var err error
			it.PostID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "body":
			var err error
			it.Body, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentWhere(ctx context.Context, obj interface{}) (gqlmodels.CommentWhere, error) {
	var it gqlmodels.CommentWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error
			it.User, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "post":
			var err error
			it.Post, err = ec.unmarshalOPostWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "body":
			var err error
			it.Body, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOCommentWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOCommentWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentsCreateInput(ctx context.Context, obj interface{}) (gqlmodels.CommentsCreateInput, error) {
	var it gqlmodels.CommentsCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "comments":
			var err error
			it.Comments, err = ec.unmarshalNCommentCreateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentsUpdateInput(ctx context.Context, obj interface{}) (gqlmodels.CommentsUpdateInput, error) {
	var it gqlmodels.CommentsUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "comments":
			var err error
			it.Comments, err = ec.unmarshalNCommentUpdateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompaniesCreateInput(ctx context.Context, obj interface{}) (gqlmodels.CompaniesCreateInput, error) {
	var it gqlmodels.CompaniesCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "companies":
			var err error
			it.Companies, err = ec.unmarshalNCompanyCreateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompaniesUpdateInput(ctx context.Context, obj interface{}) (gqlmodels.CompaniesUpdateInput, error) {
	var it gqlmodels.CompaniesUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "companies":
			var err error
			it.Companies, err = ec.unmarshalNCompanyUpdateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompanyCreateInput(ctx context.Context, obj interface{}) (gqlmodels.CompanyCreateInput, error) {
	var it gqlmodels.CompanyCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error
			it.Active, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompanyFilter(ctx context.Context, obj interface{}) (gqlmodels.CompanyFilter, error) {
	var it gqlmodels.CompanyFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOCompanyWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompanyUpdateInput(ctx context.Context, obj interface{}) (gqlmodels.CompanyUpdateInput, error) {
	var it gqlmodels.CompanyUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error
			it.Active, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompanyWhere(ctx context.Context, obj interface{}) (gqlmodels.CompanyWhere, error) {
	var it gqlmodels.CompanyWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error
			it.Active, err = ec.unmarshalOBooleanFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "locations":
			var err error
			it.Locations, err = ec.unmarshalOLocationWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "users":
			var err error
			it.Users, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOCompanyWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOCompanyWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatFilter(ctx context.Context, obj interface{}) (gqlmodels.FloatFilter, error) {
	var it gqlmodels.FloatFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error
			it.EqualTo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error
			it.NotEqualTo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessThan":
			var err error
			it.LessThan, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessThanOrEqualTo":
			var err error
			it.LessThanOrEqualTo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "moreThan":
			var err error
			it.MoreThan, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "moreThanOrEqualTo":
			var err error
			it.MoreThanOrEqualTo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error
			it.In, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notIn":
			var err error
			it.NotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFollowerCreateInput(ctx context.Context, obj interface{}) (gqlmodels.FollowerCreateInput, error) {
	var it gqlmodels.FollowerCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "followerId":
			var err error
			it.FollowerID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "followeeId":
			var err error
			it.FolloweeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFollowerFilter(ctx context.Context, obj interface{}) (gqlmodels.FollowerFilter, error) {
	var it gqlmodels.FollowerFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOFollowerWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFollowerUpdateInput(ctx context.Context, obj interface{}) (gqlmodels.FollowerUpdateInput, error) {
	var it gqlmodels.FollowerUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "followerId":
			var err error
			it.FollowerID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "followeeId":
			var err error
			it.FolloweeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFollowerWhere(ctx context.Context, obj interface{}) (gqlmodels.FollowerWhere, error) {
	var it gqlmodels.FollowerWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "follower":
			var err error
			it.Follower, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "followee":
			var err error
			it.Followee, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOFollowerWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOFollowerWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFollowersCreateInput(ctx context.Context, obj interface{}) (gqlmodels.FollowersCreateInput, error) {
	var it gqlmodels.FollowersCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "followers":
			var err error
			it.Followers, err = ec.unmarshalNFollowerCreateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFollowersUpdateInput(ctx context.Context, obj interface{}) (gqlmodels.FollowersUpdateInput, error) {
	var it gqlmodels.FollowersUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "followers":
			var err error
			it.Followers, err = ec.unmarshalNFollowerUpdateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIDFilter(ctx context.Context, obj interface{}) (gqlmodels.IDFilter, error) {
	var it gqlmodels.IDFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error
			it.EqualTo, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error
			it.NotEqualTo, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error
			it.In, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notIn":
			var err error
			it.NotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntFilter(ctx context.Context, obj interface{}) (gqlmodels.IntFilter, error) {
	var it gqlmodels.IntFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error
			it.EqualTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error
			it.NotEqualTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessThan":
			var err error
			it.LessThan, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessThanOrEqualTo":
			var err error
			it.LessThanOrEqualTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "moreThan":
			var err error
			it.MoreThan, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "moreThanOrEqualTo":
			var err error
			it.MoreThanOrEqualTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notIn":
			var err error
			it.NotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLocationCreateInput(ctx context.Context, obj interface{}) (gqlmodels.LocationCreateInput, error) {
	var it gqlmodels.LocationCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error
			it.Active, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "companyId":
			var err error
			it.CompanyID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLocationFilter(ctx context.Context, obj interface{}) (gqlmodels.LocationFilter, error) {
	var it gqlmodels.LocationFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOLocationWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLocationUpdateInput(ctx context.Context, obj interface{}) (gqlmodels.LocationUpdateInput, error) {
	var it gqlmodels.LocationUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error
			it.Active, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "companyId":
			var err error
			it.CompanyID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLocationWhere(ctx context.Context, obj interface{}) (gqlmodels.LocationWhere, error) {
	var it gqlmodels.LocationWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error
			it.Active, err = ec.unmarshalOBooleanFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOCompanyWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "users":
			var err error
			it.Users, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOLocationWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOLocationWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLocationsCreateInput(ctx context.Context, obj interface{}) (gqlmodels.LocationsCreateInput, error) {
	var it gqlmodels.LocationsCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "locations":
			var err error
			it.Locations, err = ec.unmarshalNLocationCreateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLocationsUpdateInput(ctx context.Context, obj interface{}) (gqlmodels.LocationsUpdateInput, error) {
	var it gqlmodels.LocationsUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "locations":
			var err error
			it.Locations, err = ec.unmarshalNLocationUpdateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostCreateInput(ctx context.Context, obj interface{}) (gqlmodels.PostCreateInput, error) {
	var it gqlmodels.PostCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "body":
			var err error
			it.Body, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostFilter(ctx context.Context, obj interface{}) (gqlmodels.PostFilter, error) {
	var it gqlmodels.PostFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOPostWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostUpdateInput(ctx context.Context, obj interface{}) (gqlmodels.PostUpdateInput, error) {
	var it gqlmodels.PostUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "body":
			var err error
			it.Body, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostWhere(ctx context.Context, obj interface{}) (gqlmodels.PostWhere, error) {
	var it gqlmodels.PostWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error
			it.User, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "body":
			var err error
			it.Body, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "comments":
			var err error
			it.Comments, err = ec.unmarshalOCommentWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOPostWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOPostWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostsCreateInput(ctx context.Context, obj interface{}) (gqlmodels.PostsCreateInput, error) {
	var it gqlmodels.PostsCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "posts":
			var err error
			it.Posts, err = ec.unmarshalNPostCreateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostsUpdateInput(ctx context.Context, obj interface{}) (gqlmodels.PostsUpdateInput, error) {
	var it gqlmodels.PostsUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "posts":
			var err error
			it.Posts, err = ec.unmarshalNPostUpdateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleCreateInput(ctx context.Context, obj interface{}) (gqlmodels.RoleCreateInput, error) {
	var it gqlmodels.RoleCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accessLevel":
			var err error
			it.AccessLevel, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleFilter(ctx context.Context, obj interface{}) (gqlmodels.RoleFilter, error) {
	var it gqlmodels.RoleFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalORoleWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleUpdateInput(ctx context.Context, obj interface{}) (gqlmodels.RoleUpdateInput, error) {
	var it gqlmodels.RoleUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accessLevel":
			var err error
			it.AccessLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleWhere(ctx context.Context, obj interface{}) (gqlmodels.RoleWhere, error) {
	var it gqlmodels.RoleWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "accessLevel":
			var err error
			it.AccessLevel, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "users":
			var err error
			it.Users, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalORoleWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalORoleWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRolesCreateInput(ctx context.Context, obj interface{}) (gqlmodels.RolesCreateInput, error) {
	var it gqlmodels.RolesCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "roles":
			var err error
			it.Roles, err = ec.unmarshalNRoleCreateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRolesUpdateInput(ctx context.Context, obj interface{}) (gqlmodels.RolesUpdateInput, error) {
	var it gqlmodels.RolesUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "roles":
			var err error
			it.Roles, err = ec.unmarshalNRoleUpdateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringFilter(ctx context.Context, obj interface{}) (gqlmodels.StringFilter, error) {
	var it gqlmodels.StringFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error
			it.EqualTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error
			it.NotEqualTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notIn":
			var err error
			it.NotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "startWith":
			var err error
			it.StartWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notStartWith":
			var err error
			it.NotStartWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endWith":
			var err error
			it.EndWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEndWith":
			var err error
			it.NotEndWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contain":
			var err error
			it.Contain, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notContain":
			var err error
			it.NotContain, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startWithStrict":
			var err error
			it.StartWithStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notStartWithStrict":
			var err error
			it.NotStartWithStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endWithStrict":
			var err error
			it.EndWithStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEndWithStrict":
			var err error
			it.NotEndWithStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "containStrict":
			var err error
			it.ContainStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notContainStrict":
			var err error
			it.NotContainStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserCreateInput(ctx context.Context, obj interface{}) (gqlmodels.UserCreateInput, error) {
	var it gqlmodels.UserCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "firstName":
			var err error
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error
			it.Username, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error
			it.Mobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error
			it.Phone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error
			it.Active, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastLogin":
			var err error
			it.LastLogin, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastPasswordChange":
			var err error
			it.LastPasswordChange, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "token":
			var err error
			it.Token, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "roleId":
			var err error
			it.RoleID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "companyId":
			var err error
			it.CompanyID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationId":
			var err error
			it.LocationID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserFilter(ctx context.Context, obj interface{}) (gqlmodels.UserFilter, error) {
	var it gqlmodels.UserFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserUpdateInput(ctx context.Context, obj interface{}) (gqlmodels.UserUpdateInput, error) {
	var it gqlmodels.UserUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "firstName":
			var err error
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error
			it.Username, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error
			it.Mobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error
			it.Phone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error
			it.Active, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastLogin":
			var err error
			it.LastLogin, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastPasswordChange":
			var err error
			it.LastPasswordChange, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "token":
			var err error
			it.Token, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "roleId":
			var err error
			it.RoleID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "companyId":
			var err error
			it.CompanyID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationId":
			var err error
			it.LocationID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserWhere(ctx context.Context, obj interface{}) (gqlmodels.UserWhere, error) {
	var it gqlmodels.UserWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error
			it.FirstName, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error
			it.Username, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error
			it.Mobile, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error
			it.Phone, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error
			it.Active, err = ec.unmarshalOBooleanFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastLogin":
			var err error
			it.LastLogin, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastPasswordChange":
			var err error
			it.LastPasswordChange, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "token":
			var err error
			it.Token, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "role":
			var err error
			it.Role, err = ec.unmarshalORoleWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOCompanyWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error
			it.Location, err = ec.unmarshalOLocationWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "comments":
			var err error
			it.Comments, err = ec.unmarshalOCommentWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "followeeFollowers":
			var err error
			it.FolloweeFollowers, err = ec.unmarshalOFollowerWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "followerFollowers":
			var err error
			it.FollowerFollowers, err = ec.unmarshalOFollowerWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "posts":
			var err error
			it.Posts, err = ec.unmarshalOPostWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUsersCreateInput(ctx context.Context, obj interface{}) (gqlmodels.UsersCreateInput, error) {
	var it gqlmodels.UsersCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "users":
			var err error
			it.Users, err = ec.unmarshalNUserCreateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUsersUpdateInput(ctx context.Context, obj interface{}) (gqlmodels.UsersUpdateInput, error) {
	var it gqlmodels.UsersUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "users":
			var err error
			it.Users, err = ec.unmarshalNUserUpdateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var commentImplementors = []string{"Comment"}

func (ec *executionContext) _Comment(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.Comment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Comment")
		case "id":
			out.Values[i] = ec._Comment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":
			out.Values[i] = ec._Comment_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "post":
			out.Values[i] = ec._Comment_post(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Comment_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "body":
			out.Values[i] = ec._Comment_body(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Comment_deletedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Comment_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Comment_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentDeletePayloadImplementors = []string{"CommentDeletePayload"}

func (ec *executionContext) _CommentDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.CommentDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentDeletePayload")
		case "id":
			out.Values[i] = ec._CommentDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentPayloadImplementors = []string{"CommentPayload"}

func (ec *executionContext) _CommentPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.CommentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentPayload")
		case "comment":
			out.Values[i] = ec._CommentPayload_comment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentsDeletePayloadImplementors = []string{"CommentsDeletePayload"}

func (ec *executionContext) _CommentsDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.CommentsDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentsDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentsDeletePayload")
		case "ids":
			out.Values[i] = ec._CommentsDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentsPayloadImplementors = []string{"CommentsPayload"}

func (ec *executionContext) _CommentsPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.CommentsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentsPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentsPayload")
		case "comments":
			out.Values[i] = ec._CommentsPayload_comments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentsUpdatePayloadImplementors = []string{"CommentsUpdatePayload"}

func (ec *executionContext) _CommentsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.CommentsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentsUpdatePayload")
		case "ok":
			out.Values[i] = ec._CommentsUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var companiesDeletePayloadImplementors = []string{"CompaniesDeletePayload"}

func (ec *executionContext) _CompaniesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.CompaniesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companiesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompaniesDeletePayload")
		case "ids":
			out.Values[i] = ec._CompaniesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var companiesPayloadImplementors = []string{"CompaniesPayload"}

func (ec *executionContext) _CompaniesPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.CompaniesPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companiesPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompaniesPayload")
		case "companies":
			out.Values[i] = ec._CompaniesPayload_companies(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var companiesUpdatePayloadImplementors = []string{"CompaniesUpdatePayload"}

func (ec *executionContext) _CompaniesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.CompaniesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companiesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompaniesUpdatePayload")
		case "ok":
			out.Values[i] = ec._CompaniesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var companyImplementors = []string{"Company"}

func (ec *executionContext) _Company(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.Company) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Company")
		case "id":
			out.Values[i] = ec._Company_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Company_name(ctx, field, obj)
		case "active":
			out.Values[i] = ec._Company_active(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Company_createdAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Company_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Company_updatedAt(ctx, field, obj)
		case "locations":
			out.Values[i] = ec._Company_locations(ctx, field, obj)
		case "users":
			out.Values[i] = ec._Company_users(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var companyDeletePayloadImplementors = []string{"CompanyDeletePayload"}

func (ec *executionContext) _CompanyDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.CompanyDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyDeletePayload")
		case "id":
			out.Values[i] = ec._CompanyDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var companyPayloadImplementors = []string{"CompanyPayload"}

func (ec *executionContext) _CompanyPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.CompanyPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyPayload")
		case "company":
			out.Values[i] = ec._CompanyPayload_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var followerImplementors = []string{"Follower"}

func (ec *executionContext) _Follower(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.Follower) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, followerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Follower")
		case "follower":
			out.Values[i] = ec._Follower_follower(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "followee":
			out.Values[i] = ec._Follower_followee(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Follower_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Follower_deletedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Follower_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var followerDeletePayloadImplementors = []string{"FollowerDeletePayload"}

func (ec *executionContext) _FollowerDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.FollowerDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, followerDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FollowerDeletePayload")
		case "id":
			out.Values[i] = ec._FollowerDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var followerPayloadImplementors = []string{"FollowerPayload"}

func (ec *executionContext) _FollowerPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.FollowerPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, followerPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FollowerPayload")
		case "follower":
			out.Values[i] = ec._FollowerPayload_follower(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var followersDeletePayloadImplementors = []string{"FollowersDeletePayload"}

func (ec *executionContext) _FollowersDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.FollowersDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, followersDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FollowersDeletePayload")
		case "ids":
			out.Values[i] = ec._FollowersDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var followersPayloadImplementors = []string{"FollowersPayload"}

func (ec *executionContext) _FollowersPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.FollowersPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, followersPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FollowersPayload")
		case "followers":
			out.Values[i] = ec._FollowersPayload_followers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var followersUpdatePayloadImplementors = []string{"FollowersUpdatePayload"}

func (ec *executionContext) _FollowersUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.FollowersUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, followersUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FollowersUpdatePayload")
		case "ok":
			out.Values[i] = ec._FollowersUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var locationImplementors = []string{"Location"}

func (ec *executionContext) _Location(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.Location) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Location")
		case "id":
			out.Values[i] = ec._Location_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Location_name(ctx, field, obj)
		case "active":
			out.Values[i] = ec._Location_active(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Location_address(ctx, field, obj)
		case "company":
			out.Values[i] = ec._Location_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Location_createdAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Location_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Location_updatedAt(ctx, field, obj)
		case "users":
			out.Values[i] = ec._Location_users(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var locationDeletePayloadImplementors = []string{"LocationDeletePayload"}

func (ec *executionContext) _LocationDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.LocationDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LocationDeletePayload")
		case "id":
			out.Values[i] = ec._LocationDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var locationPayloadImplementors = []string{"LocationPayload"}

func (ec *executionContext) _LocationPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.LocationPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LocationPayload")
		case "location":
			out.Values[i] = ec._LocationPayload_location(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var locationsDeletePayloadImplementors = []string{"LocationsDeletePayload"}

func (ec *executionContext) _LocationsDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.LocationsDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationsDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LocationsDeletePayload")
		case "ids":
			out.Values[i] = ec._LocationsDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var locationsPayloadImplementors = []string{"LocationsPayload"}

func (ec *executionContext) _LocationsPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.LocationsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationsPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LocationsPayload")
		case "locations":
			out.Values[i] = ec._LocationsPayload_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var locationsUpdatePayloadImplementors = []string{"LocationsUpdatePayload"}

func (ec *executionContext) _LocationsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.LocationsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LocationsUpdatePayload")
		case "ok":
			out.Values[i] = ec._LocationsUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createComment":
			out.Values[i] = ec._Mutation_createComment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createComments":
			out.Values[i] = ec._Mutation_createComments(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateComment":
			out.Values[i] = ec._Mutation_updateComment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateComments":
			out.Values[i] = ec._Mutation_updateComments(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteComment":
			out.Values[i] = ec._Mutation_deleteComment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteComments":
			out.Values[i] = ec._Mutation_deleteComments(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createCompany":
			out.Values[i] = ec._Mutation_createCompany(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createCompanies":
			out.Values[i] = ec._Mutation_createCompanies(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateCompany":
			out.Values[i] = ec._Mutation_updateCompany(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateCompanies":
			out.Values[i] = ec._Mutation_updateCompanies(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteCompany":
			out.Values[i] = ec._Mutation_deleteCompany(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteCompanies":
			out.Values[i] = ec._Mutation_deleteCompanies(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFollower":
			out.Values[i] = ec._Mutation_createFollower(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFollowers":
			out.Values[i] = ec._Mutation_createFollowers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFollower":
			out.Values[i] = ec._Mutation_updateFollower(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFollowers":
			out.Values[i] = ec._Mutation_updateFollowers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFollower":
			out.Values[i] = ec._Mutation_deleteFollower(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFollowers":
			out.Values[i] = ec._Mutation_deleteFollowers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createLocation":
			out.Values[i] = ec._Mutation_createLocation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createLocations":
			out.Values[i] = ec._Mutation_createLocations(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLocation":
			out.Values[i] = ec._Mutation_updateLocation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLocations":
			out.Values[i] = ec._Mutation_updateLocations(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteLocation":
			out.Values[i] = ec._Mutation_deleteLocation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteLocations":
			out.Values[i] = ec._Mutation_deleteLocations(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPost":
			out.Values[i] = ec._Mutation_createPost(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPosts":
			out.Values[i] = ec._Mutation_createPosts(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePost":
			out.Values[i] = ec._Mutation_updatePost(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePosts":
			out.Values[i] = ec._Mutation_updatePosts(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePost":
			out.Values[i] = ec._Mutation_deletePost(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePosts":
			out.Values[i] = ec._Mutation_deletePosts(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRole":
			out.Values[i] = ec._Mutation_createRole(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRoles":
			out.Values[i] = ec._Mutation_createRoles(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRole":
			out.Values[i] = ec._Mutation_updateRole(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRoles":
			out.Values[i] = ec._Mutation_updateRoles(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRole":
			out.Values[i] = ec._Mutation_deleteRole(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRoles":
			out.Values[i] = ec._Mutation_deleteRoles(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createUser":
			out.Values[i] = ec._Mutation_createUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createUsers":
			out.Values[i] = ec._Mutation_createUsers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUser":
			out.Values[i] = ec._Mutation_updateUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUsers":
			out.Values[i] = ec._Mutation_updateUsers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteUser":
			out.Values[i] = ec._Mutation_deleteUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteUsers":
			out.Values[i] = ec._Mutation_deleteUsers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postImplementors = []string{"Post"}

func (ec *executionContext) _Post(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.Post) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Post")
		case "id":
			out.Values[i] = ec._Post_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":
			out.Values[i] = ec._Post_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Post_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "body":
			out.Values[i] = ec._Post_body(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Post_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Post_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Post_deletedAt(ctx, field, obj)
		case "comments":
			out.Values[i] = ec._Post_comments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postDeletePayloadImplementors = []string{"PostDeletePayload"}

func (ec *executionContext) _PostDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.PostDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostDeletePayload")
		case "id":
			out.Values[i] = ec._PostDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postPayloadImplementors = []string{"PostPayload"}

func (ec *executionContext) _PostPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.PostPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostPayload")
		case "post":
			out.Values[i] = ec._PostPayload_post(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postsDeletePayloadImplementors = []string{"PostsDeletePayload"}

func (ec *executionContext) _PostsDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.PostsDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postsDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostsDeletePayload")
		case "ids":
			out.Values[i] = ec._PostsDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postsPayloadImplementors = []string{"PostsPayload"}

func (ec *executionContext) _PostsPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.PostsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postsPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostsPayload")
		case "posts":
			out.Values[i] = ec._PostsPayload_posts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postsUpdatePayloadImplementors = []string{"PostsUpdatePayload"}

func (ec *executionContext) _PostsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.PostsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostsUpdatePayload")
		case "ok":
			out.Values[i] = ec._PostsUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "comment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_comment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "comments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_comments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "company":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_company(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "companies":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_companies(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "follower":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_follower(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "followers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_followers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "location":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_location(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "locations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_locations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "post":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_post(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "posts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_posts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "role":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_role(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "roles":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_roles(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "users":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var roleImplementors = []string{"Role"}

func (ec *executionContext) _Role(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.Role) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Role")
		case "id":
			out.Values[i] = ec._Role_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "accessLevel":
			out.Values[i] = ec._Role_accessLevel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Role_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Role_deletedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Role_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Role_updatedAt(ctx, field, obj)
		case "users":
			out.Values[i] = ec._Role_users(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var roleDeletePayloadImplementors = []string{"RoleDeletePayload"}

func (ec *executionContext) _RoleDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.RoleDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RoleDeletePayload")
		case "id":
			out.Values[i] = ec._RoleDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rolePayloadImplementors = []string{"RolePayload"}

func (ec *executionContext) _RolePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.RolePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rolePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RolePayload")
		case "role":
			out.Values[i] = ec._RolePayload_role(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rolesDeletePayloadImplementors = []string{"RolesDeletePayload"}

func (ec *executionContext) _RolesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.RolesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rolesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RolesDeletePayload")
		case "ids":
			out.Values[i] = ec._RolesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rolesPayloadImplementors = []string{"RolesPayload"}

func (ec *executionContext) _RolesPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.RolesPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rolesPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RolesPayload")
		case "roles":
			out.Values[i] = ec._RolesPayload_roles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rolesUpdatePayloadImplementors = []string{"RolesUpdatePayload"}

func (ec *executionContext) _RolesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.RolesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rolesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RolesUpdatePayload")
		case "ok":
			out.Values[i] = ec._RolesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firstName":
			out.Values[i] = ec._User_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._User_lastName(ctx, field, obj)
		case "username":
			out.Values[i] = ec._User_username(ctx, field, obj)
		case "password":
			out.Values[i] = ec._User_password(ctx, field, obj)
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
		case "mobile":
			out.Values[i] = ec._User_mobile(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._User_phone(ctx, field, obj)
		case "address":
			out.Values[i] = ec._User_address(ctx, field, obj)
		case "active":
			out.Values[i] = ec._User_active(ctx, field, obj)
		case "lastLogin":
			out.Values[i] = ec._User_lastLogin(ctx, field, obj)
		case "lastPasswordChange":
			out.Values[i] = ec._User_lastPasswordChange(ctx, field, obj)
		case "token":
			out.Values[i] = ec._User_token(ctx, field, obj)
		case "role":
			out.Values[i] = ec._User_role(ctx, field, obj)
		case "company":
			out.Values[i] = ec._User_company(ctx, field, obj)
		case "location":
			out.Values[i] = ec._User_location(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._User_updatedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._User_deletedAt(ctx, field, obj)
		case "comments":
			out.Values[i] = ec._User_comments(ctx, field, obj)
		case "followeeFollowers":
			out.Values[i] = ec._User_followeeFollowers(ctx, field, obj)
		case "followerFollowers":
			out.Values[i] = ec._User_followerFollowers(ctx, field, obj)
		case "posts":
			out.Values[i] = ec._User_posts(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userDeletePayloadImplementors = []string{"UserDeletePayload"}

func (ec *executionContext) _UserDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.UserDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserDeletePayload")
		case "id":
			out.Values[i] = ec._UserDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userPayloadImplementors = []string{"UserPayload"}

func (ec *executionContext) _UserPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.UserPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserPayload")
		case "user":
			out.Values[i] = ec._UserPayload_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var usersDeletePayloadImplementors = []string{"UsersDeletePayload"}

func (ec *executionContext) _UsersDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.UsersDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, usersDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UsersDeletePayload")
		case "ids":
			out.Values[i] = ec._UsersDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var usersPayloadImplementors = []string{"UsersPayload"}

func (ec *executionContext) _UsersPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.UsersPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, usersPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UsersPayload")
		case "users":
			out.Values[i] = ec._UsersPayload_users(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var usersUpdatePayloadImplementors = []string{"UsersUpdatePayload"}

func (ec *executionContext) _UsersUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodels.UsersUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, usersUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UsersUpdatePayload")
		case "ok":
			out.Values[i] = ec._UsersUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNComment2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐComment(ctx context.Context, sel ast.SelectionSet, v gqlmodels.Comment) graphql.Marshaler {
	return ec._Comment(ctx, sel, &v)
}

func (ec *executionContext) marshalNComment2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodels.Comment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComment2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNComment2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐComment(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.Comment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommentCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentCreateInput(ctx context.Context, v interface{}) (gqlmodels.CommentCreateInput, error) {
	return ec.unmarshalInputCommentCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalNCommentCreateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentCreateInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.CommentCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.CommentCreateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNCommentCreateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCommentCreateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentCreateInput(ctx context.Context, v interface{}) (*gqlmodels.CommentCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCommentCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentCreateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNCommentDeletePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentDeletePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.CommentDeletePayload) graphql.Marshaler {
	return ec._CommentDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.CommentDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCommentPayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.CommentPayload) graphql.Marshaler {
	return ec._CommentPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.CommentPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommentUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentUpdateInput(ctx context.Context, v interface{}) (gqlmodels.CommentUpdateInput, error) {
	return ec.unmarshalInputCommentUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNCommentUpdateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentUpdateInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.CommentUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.CommentUpdateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNCommentUpdateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCommentUpdateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentUpdateInput(ctx context.Context, v interface{}) (*gqlmodels.CommentUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCommentUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentUpdateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNCommentsCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentsCreateInput(ctx context.Context, v interface{}) (gqlmodels.CommentsCreateInput, error) {
	return ec.unmarshalInputCommentsCreateInput(ctx, v)
}

func (ec *executionContext) marshalNCommentsDeletePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentsDeletePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.CommentsDeletePayload) graphql.Marshaler {
	return ec._CommentsDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentsDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentsDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.CommentsDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentsDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCommentsPayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentsPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.CommentsPayload) graphql.Marshaler {
	return ec._CommentsPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentsPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentsPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.CommentsPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentsPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommentsUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentsUpdateInput(ctx context.Context, v interface{}) (gqlmodels.CommentsUpdateInput, error) {
	return ec.unmarshalInputCommentsUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNCommentsUpdatePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.CommentsUpdatePayload) graphql.Marshaler {
	return ec._CommentsUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentsUpdatePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.CommentsUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCompaniesCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompaniesCreateInput(ctx context.Context, v interface{}) (gqlmodels.CompaniesCreateInput, error) {
	return ec.unmarshalInputCompaniesCreateInput(ctx, v)
}

func (ec *executionContext) marshalNCompaniesDeletePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompaniesDeletePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.CompaniesDeletePayload) graphql.Marshaler {
	return ec._CompaniesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompaniesDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompaniesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.CompaniesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompaniesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCompaniesPayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompaniesPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.CompaniesPayload) graphql.Marshaler {
	return ec._CompaniesPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompaniesPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompaniesPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.CompaniesPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompaniesPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCompaniesUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompaniesUpdateInput(ctx context.Context, v interface{}) (gqlmodels.CompaniesUpdateInput, error) {
	return ec.unmarshalInputCompaniesUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNCompaniesUpdatePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompaniesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.CompaniesUpdatePayload) graphql.Marshaler {
	return ec._CompaniesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompaniesUpdatePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompaniesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.CompaniesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompaniesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCompany2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompany(ctx context.Context, sel ast.SelectionSet, v gqlmodels.Company) graphql.Marshaler {
	return ec._Company(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompany2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodels.Company) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompany2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompany(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCompany2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompany(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.Company) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Company(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCompanyCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyCreateInput(ctx context.Context, v interface{}) (gqlmodels.CompanyCreateInput, error) {
	return ec.unmarshalInputCompanyCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalNCompanyCreateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyCreateInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.CompanyCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.CompanyCreateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNCompanyCreateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCompanyCreateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyCreateInput(ctx context.Context, v interface{}) (*gqlmodels.CompanyCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCompanyCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyCreateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNCompanyDeletePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyDeletePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.CompanyDeletePayload) graphql.Marshaler {
	return ec._CompanyDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompanyDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.CompanyDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompanyDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCompanyPayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.CompanyPayload) graphql.Marshaler {
	return ec._CompanyPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompanyPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.CompanyPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompanyPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCompanyUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyUpdateInput(ctx context.Context, v interface{}) (gqlmodels.CompanyUpdateInput, error) {
	return ec.unmarshalInputCompanyUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNCompanyUpdateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyUpdateInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.CompanyUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.CompanyUpdateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNCompanyUpdateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCompanyUpdateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyUpdateInput(ctx context.Context, v interface{}) (*gqlmodels.CompanyUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCompanyUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyUpdateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	return graphql.UnmarshalFloat(v)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNFollower2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollower(ctx context.Context, sel ast.SelectionSet, v gqlmodels.Follower) graphql.Marshaler {
	return ec._Follower(ctx, sel, &v)
}

func (ec *executionContext) marshalNFollower2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodels.Follower) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFollower2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollower(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNFollower2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollower(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.Follower) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Follower(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFollowerCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerCreateInput(ctx context.Context, v interface{}) (gqlmodels.FollowerCreateInput, error) {
	return ec.unmarshalInputFollowerCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalNFollowerCreateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerCreateInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.FollowerCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.FollowerCreateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNFollowerCreateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNFollowerCreateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerCreateInput(ctx context.Context, v interface{}) (*gqlmodels.FollowerCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNFollowerCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerCreateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNFollowerDeletePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerDeletePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.FollowerDeletePayload) graphql.Marshaler {
	return ec._FollowerDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFollowerDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.FollowerDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FollowerDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFollowerPayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.FollowerPayload) graphql.Marshaler {
	return ec._FollowerPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFollowerPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.FollowerPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FollowerPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFollowerUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerUpdateInput(ctx context.Context, v interface{}) (gqlmodels.FollowerUpdateInput, error) {
	return ec.unmarshalInputFollowerUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNFollowerUpdateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerUpdateInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.FollowerUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.FollowerUpdateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNFollowerUpdateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNFollowerUpdateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerUpdateInput(ctx context.Context, v interface{}) (*gqlmodels.FollowerUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNFollowerUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerUpdateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNFollowersCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowersCreateInput(ctx context.Context, v interface{}) (gqlmodels.FollowersCreateInput, error) {
	return ec.unmarshalInputFollowersCreateInput(ctx, v)
}

func (ec *executionContext) marshalNFollowersDeletePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowersDeletePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.FollowersDeletePayload) graphql.Marshaler {
	return ec._FollowersDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFollowersDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowersDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.FollowersDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FollowersDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFollowersPayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowersPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.FollowersPayload) graphql.Marshaler {
	return ec._FollowersPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFollowersPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowersPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.FollowersPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FollowersPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFollowersUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowersUpdateInput(ctx context.Context, v interface{}) (gqlmodels.FollowersUpdateInput, error) {
	return ec.unmarshalInputFollowersUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNFollowersUpdatePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowersUpdatePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.FollowersUpdatePayload) graphql.Marshaler {
	return ec._FollowersUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFollowersUpdatePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowersUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.FollowersUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FollowersUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNLocation2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocation(ctx context.Context, sel ast.SelectionSet, v gqlmodels.Location) graphql.Marshaler {
	return ec._Location(ctx, sel, &v)
}

func (ec *executionContext) marshalNLocation2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodels.Location) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLocation2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNLocation2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocation(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.Location) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Location(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLocationCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationCreateInput(ctx context.Context, v interface{}) (gqlmodels.LocationCreateInput, error) {
	return ec.unmarshalInputLocationCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalNLocationCreateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationCreateInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.LocationCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.LocationCreateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNLocationCreateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNLocationCreateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationCreateInput(ctx context.Context, v interface{}) (*gqlmodels.LocationCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNLocationCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationCreateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNLocationDeletePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationDeletePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.LocationDeletePayload) graphql.Marshaler {
	return ec._LocationDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLocationDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.LocationDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LocationDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLocationPayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.LocationPayload) graphql.Marshaler {
	return ec._LocationPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLocationPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.LocationPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LocationPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLocationUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationUpdateInput(ctx context.Context, v interface{}) (gqlmodels.LocationUpdateInput, error) {
	return ec.unmarshalInputLocationUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNLocationUpdateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationUpdateInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.LocationUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.LocationUpdateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNLocationUpdateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNLocationUpdateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationUpdateInput(ctx context.Context, v interface{}) (*gqlmodels.LocationUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNLocationUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationUpdateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNLocationsCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationsCreateInput(ctx context.Context, v interface{}) (gqlmodels.LocationsCreateInput, error) {
	return ec.unmarshalInputLocationsCreateInput(ctx, v)
}

func (ec *executionContext) marshalNLocationsDeletePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationsDeletePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.LocationsDeletePayload) graphql.Marshaler {
	return ec._LocationsDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLocationsDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationsDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.LocationsDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LocationsDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLocationsPayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationsPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.LocationsPayload) graphql.Marshaler {
	return ec._LocationsPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLocationsPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationsPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.LocationsPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LocationsPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLocationsUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationsUpdateInput(ctx context.Context, v interface{}) (gqlmodels.LocationsUpdateInput, error) {
	return ec.unmarshalInputLocationsUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNLocationsUpdatePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.LocationsUpdatePayload) graphql.Marshaler {
	return ec._LocationsUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLocationsUpdatePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.LocationsUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LocationsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNPost2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPost(ctx context.Context, sel ast.SelectionSet, v gqlmodels.Post) graphql.Marshaler {
	return ec._Post(ctx, sel, &v)
}

func (ec *executionContext) marshalNPost2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodels.Post) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPost2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPost2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPost(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.Post) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Post(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPostCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostCreateInput(ctx context.Context, v interface{}) (gqlmodels.PostCreateInput, error) {
	return ec.unmarshalInputPostCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalNPostCreateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostCreateInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.PostCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.PostCreateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNPostCreateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNPostCreateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostCreateInput(ctx context.Context, v interface{}) (*gqlmodels.PostCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNPostCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostCreateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNPostDeletePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostDeletePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.PostDeletePayload) graphql.Marshaler {
	return ec._PostDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNPostDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.PostDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PostDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNPostPayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.PostPayload) graphql.Marshaler {
	return ec._PostPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNPostPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.PostPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PostPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPostUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostUpdateInput(ctx context.Context, v interface{}) (gqlmodels.PostUpdateInput, error) {
	return ec.unmarshalInputPostUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNPostUpdateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostUpdateInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.PostUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.PostUpdateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNPostUpdateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNPostUpdateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostUpdateInput(ctx context.Context, v interface{}) (*gqlmodels.PostUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNPostUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostUpdateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNPostsCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostsCreateInput(ctx context.Context, v interface{}) (gqlmodels.PostsCreateInput, error) {
	return ec.unmarshalInputPostsCreateInput(ctx, v)
}

func (ec *executionContext) marshalNPostsDeletePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostsDeletePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.PostsDeletePayload) graphql.Marshaler {
	return ec._PostsDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNPostsDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostsDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.PostsDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PostsDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNPostsPayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostsPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.PostsPayload) graphql.Marshaler {
	return ec._PostsPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNPostsPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostsPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.PostsPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PostsPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPostsUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostsUpdateInput(ctx context.Context, v interface{}) (gqlmodels.PostsUpdateInput, error) {
	return ec.unmarshalInputPostsUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNPostsUpdatePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.PostsUpdatePayload) graphql.Marshaler {
	return ec._PostsUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNPostsUpdatePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.PostsUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PostsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRole2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRole(ctx context.Context, sel ast.SelectionSet, v gqlmodels.Role) graphql.Marshaler {
	return ec._Role(ctx, sel, &v)
}

func (ec *executionContext) marshalNRole2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodels.Role) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRole2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRole2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRole(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.Role) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Role(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRoleCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleCreateInput(ctx context.Context, v interface{}) (gqlmodels.RoleCreateInput, error) {
	return ec.unmarshalInputRoleCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalNRoleCreateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleCreateInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.RoleCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.RoleCreateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNRoleCreateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNRoleCreateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleCreateInput(ctx context.Context, v interface{}) (*gqlmodels.RoleCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNRoleCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleCreateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNRoleDeletePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleDeletePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.RoleDeletePayload) graphql.Marshaler {
	return ec._RoleDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRoleDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.RoleDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RoleDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRolePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.RolePayload) graphql.Marshaler {
	return ec._RolePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRolePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.RolePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RolePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRoleUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleUpdateInput(ctx context.Context, v interface{}) (gqlmodels.RoleUpdateInput, error) {
	return ec.unmarshalInputRoleUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNRoleUpdateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleUpdateInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.RoleUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.RoleUpdateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNRoleUpdateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNRoleUpdateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleUpdateInput(ctx context.Context, v interface{}) (*gqlmodels.RoleUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNRoleUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleUpdateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNRolesCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolesCreateInput(ctx context.Context, v interface{}) (gqlmodels.RolesCreateInput, error) {
	return ec.unmarshalInputRolesCreateInput(ctx, v)
}

func (ec *executionContext) marshalNRolesDeletePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolesDeletePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.RolesDeletePayload) graphql.Marshaler {
	return ec._RolesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRolesDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.RolesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RolesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRolesPayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolesPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.RolesPayload) graphql.Marshaler {
	return ec._RolesPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRolesPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolesPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.RolesPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RolesPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRolesUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolesUpdateInput(ctx context.Context, v interface{}) (gqlmodels.RolesUpdateInput, error) {
	return ec.unmarshalInputRolesUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNRolesUpdatePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.RolesUpdatePayload) graphql.Marshaler {
	return ec._RolesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRolesUpdatePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRolesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.RolesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RolesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v gqlmodels.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodels.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserCreateInput(ctx context.Context, v interface{}) (gqlmodels.UserCreateInput, error) {
	return ec.unmarshalInputUserCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalNUserCreateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserCreateInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.UserCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.UserCreateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNUserCreateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserCreateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserCreateInput(ctx context.Context, v interface{}) (*gqlmodels.UserCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUserCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserCreateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNUserDeletePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserDeletePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.UserDeletePayload) graphql.Marshaler {
	return ec._UserDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.UserDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNUserPayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.UserPayload) graphql.Marshaler {
	return ec._UserPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.UserPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserUpdateInput(ctx context.Context, v interface{}) (gqlmodels.UserUpdateInput, error) {
	return ec.unmarshalInputUserUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNUserUpdateInput2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserUpdateInputᚄ(ctx context.Context, v interface{}) ([]*gqlmodels.UserUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*gqlmodels.UserUpdateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNUserUpdateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserUpdateInput2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserUpdateInput(ctx context.Context, v interface{}) (*gqlmodels.UserUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUserUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserUpdateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNUsersCreateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUsersCreateInput(ctx context.Context, v interface{}) (gqlmodels.UsersCreateInput, error) {
	return ec.unmarshalInputUsersCreateInput(ctx, v)
}

func (ec *executionContext) marshalNUsersDeletePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUsersDeletePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.UsersDeletePayload) graphql.Marshaler {
	return ec._UsersDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUsersDeletePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUsersDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.UsersDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UsersDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNUsersPayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUsersPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.UsersPayload) graphql.Marshaler {
	return ec._UsersPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUsersPayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUsersPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.UsersPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UsersPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUsersUpdateInput2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUsersUpdateInput(ctx context.Context, v interface{}) (gqlmodels.UsersUpdateInput, error) {
	return ec.unmarshalInputUsersUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNUsersUpdatePayload2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUsersUpdatePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodels.UsersUpdatePayload) graphql.Marshaler {
	return ec._UsersUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUsersUpdatePayload2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUsersUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.UsersUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UsersUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOBooleanFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐBooleanFilter(ctx context.Context, v interface{}) (gqlmodels.BooleanFilter, error) {
	return ec.unmarshalInputBooleanFilter(ctx, v)
}

func (ec *executionContext) unmarshalOBooleanFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐBooleanFilter(ctx context.Context, v interface{}) (*gqlmodels.BooleanFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBooleanFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐBooleanFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOComment2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐComment(ctx context.Context, sel ast.SelectionSet, v gqlmodels.Comment) graphql.Marshaler {
	return ec._Comment(ctx, sel, &v)
}

func (ec *executionContext) marshalOComment2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐComment(ctx context.Context, sel ast.SelectionSet, v []*gqlmodels.Comment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOComment2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOComment2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐComment(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.Comment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCommentFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentFilter(ctx context.Context, v interface{}) (gqlmodels.CommentFilter, error) {
	return ec.unmarshalInputCommentFilter(ctx, v)
}

func (ec *executionContext) unmarshalOCommentFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentFilter(ctx context.Context, v interface{}) (*gqlmodels.CommentFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCommentFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOCommentWhere2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentWhere(ctx context.Context, v interface{}) (gqlmodels.CommentWhere, error) {
	return ec.unmarshalInputCommentWhere(ctx, v)
}

func (ec *executionContext) unmarshalOCommentWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentWhere(ctx context.Context, v interface{}) (*gqlmodels.CommentWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCommentWhere2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCommentWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOCompany2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompany(ctx context.Context, sel ast.SelectionSet, v gqlmodels.Company) graphql.Marshaler {
	return ec._Company(ctx, sel, &v)
}

func (ec *executionContext) marshalOCompany2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompany(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.Company) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Company(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCompanyFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyFilter(ctx context.Context, v interface{}) (gqlmodels.CompanyFilter, error) {
	return ec.unmarshalInputCompanyFilter(ctx, v)
}

func (ec *executionContext) unmarshalOCompanyFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyFilter(ctx context.Context, v interface{}) (*gqlmodels.CompanyFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCompanyFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOCompanyWhere2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyWhere(ctx context.Context, v interface{}) (gqlmodels.CompanyWhere, error) {
	return ec.unmarshalInputCompanyWhere(ctx, v)
}

func (ec *executionContext) unmarshalOCompanyWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyWhere(ctx context.Context, v interface{}) (*gqlmodels.CompanyWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCompanyWhere2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐCompanyWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	return graphql.UnmarshalFloat(v)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	return graphql.MarshalFloat(v)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFloat2float64(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOFloat2float64(ctx, sel, *v)
}

func (ec *executionContext) marshalOFollower2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollower(ctx context.Context, sel ast.SelectionSet, v gqlmodels.Follower) graphql.Marshaler {
	return ec._Follower(ctx, sel, &v)
}

func (ec *executionContext) marshalOFollower2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollower(ctx context.Context, sel ast.SelectionSet, v []*gqlmodels.Follower) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFollower2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollower(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOFollower2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollower(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.Follower) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Follower(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFollowerFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerFilter(ctx context.Context, v interface{}) (gqlmodels.FollowerFilter, error) {
	return ec.unmarshalInputFollowerFilter(ctx, v)
}

func (ec *executionContext) unmarshalOFollowerFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerFilter(ctx context.Context, v interface{}) (*gqlmodels.FollowerFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFollowerFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOFollowerWhere2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerWhere(ctx context.Context, v interface{}) (gqlmodels.FollowerWhere, error) {
	return ec.unmarshalInputFollowerWhere(ctx, v)
}

func (ec *executionContext) unmarshalOFollowerWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerWhere(ctx context.Context, v interface{}) (*gqlmodels.FollowerWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFollowerWhere2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐFollowerWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalID(v)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOID2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOID2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOIDFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIDFilter(ctx context.Context, v interface{}) (gqlmodels.IDFilter, error) {
	return ec.unmarshalInputIDFilter(ctx, v)
}

func (ec *executionContext) unmarshalOIDFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIDFilter(ctx context.Context, v interface{}) (*gqlmodels.IDFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIDFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInt2int(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOInt2int(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOIntFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx context.Context, v interface{}) (gqlmodels.IntFilter, error) {
	return ec.unmarshalInputIntFilter(ctx, v)
}

func (ec *executionContext) unmarshalOIntFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx context.Context, v interface{}) (*gqlmodels.IntFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIntFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOLocation2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocation(ctx context.Context, sel ast.SelectionSet, v gqlmodels.Location) graphql.Marshaler {
	return ec._Location(ctx, sel, &v)
}

func (ec *executionContext) marshalOLocation2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocation(ctx context.Context, sel ast.SelectionSet, v []*gqlmodels.Location) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLocation2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLocation2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocation(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.Location) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Location(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLocationFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationFilter(ctx context.Context, v interface{}) (gqlmodels.LocationFilter, error) {
	return ec.unmarshalInputLocationFilter(ctx, v)
}

func (ec *executionContext) unmarshalOLocationFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationFilter(ctx context.Context, v interface{}) (*gqlmodels.LocationFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLocationFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOLocationWhere2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationWhere(ctx context.Context, v interface{}) (gqlmodels.LocationWhere, error) {
	return ec.unmarshalInputLocationWhere(ctx, v)
}

func (ec *executionContext) unmarshalOLocationWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationWhere(ctx context.Context, v interface{}) (*gqlmodels.LocationWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLocationWhere2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐLocationWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOPost2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPost(ctx context.Context, sel ast.SelectionSet, v gqlmodels.Post) graphql.Marshaler {
	return ec._Post(ctx, sel, &v)
}

func (ec *executionContext) marshalOPost2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPost(ctx context.Context, sel ast.SelectionSet, v []*gqlmodels.Post) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPost2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPost2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPost(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.Post) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Post(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPostFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostFilter(ctx context.Context, v interface{}) (gqlmodels.PostFilter, error) {
	return ec.unmarshalInputPostFilter(ctx, v)
}

func (ec *executionContext) unmarshalOPostFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostFilter(ctx context.Context, v interface{}) (*gqlmodels.PostFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOPostFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOPostWhere2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostWhere(ctx context.Context, v interface{}) (gqlmodels.PostWhere, error) {
	return ec.unmarshalInputPostWhere(ctx, v)
}

func (ec *executionContext) unmarshalOPostWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostWhere(ctx context.Context, v interface{}) (*gqlmodels.PostWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOPostWhere2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐPostWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalORole2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRole(ctx context.Context, sel ast.SelectionSet, v gqlmodels.Role) graphql.Marshaler {
	return ec._Role(ctx, sel, &v)
}

func (ec *executionContext) marshalORole2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRole(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.Role) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Role(ctx, sel, v)
}

func (ec *executionContext) unmarshalORoleFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleFilter(ctx context.Context, v interface{}) (gqlmodels.RoleFilter, error) {
	return ec.unmarshalInputRoleFilter(ctx, v)
}

func (ec *executionContext) unmarshalORoleFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleFilter(ctx context.Context, v interface{}) (*gqlmodels.RoleFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORoleFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalORoleWhere2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleWhere(ctx context.Context, v interface{}) (gqlmodels.RoleWhere, error) {
	return ec.unmarshalInputRoleWhere(ctx, v)
}

func (ec *executionContext) unmarshalORoleWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleWhere(ctx context.Context, v interface{}) (*gqlmodels.RoleWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORoleWhere2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐRoleWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOStringFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx context.Context, v interface{}) (gqlmodels.StringFilter, error) {
	return ec.unmarshalInputStringFilter(ctx, v)
}

func (ec *executionContext) unmarshalOStringFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx context.Context, v interface{}) (*gqlmodels.StringFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOStringFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOUser2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v gqlmodels.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalOUser2ᚕᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v []*gqlmodels.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUser2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *gqlmodels.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserFilter(ctx context.Context, v interface{}) (gqlmodels.UserFilter, error) {
	return ec.unmarshalInputUserFilter(ctx, v)
}

func (ec *executionContext) unmarshalOUserFilter2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserFilter(ctx context.Context, v interface{}) (*gqlmodels.UserFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUserFilter2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOUserWhere2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserWhere(ctx context.Context, v interface{}) (gqlmodels.UserWhere, error) {
	return ec.unmarshalInputUserWhere(ctx, v)
}

func (ec *executionContext) unmarshalOUserWhere2ᚖgithubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserWhere(ctx context.Context, v interface{}) (*gqlmodels.UserWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUserWhere2githubᚗcomᚋwednesdayᚑsolutionᚋgoᚑboilerᚋgraphqlᚋmodelsᚐUserWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
