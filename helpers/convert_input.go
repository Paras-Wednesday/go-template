// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package helpers

import (
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/wednesday-solutions/go-boiler/gqlgen/helper"
	"github.com/wednesday-solutions/go-boiler/graphql_models"
	"github.com/wednesday-solutions/go-boiler/models"
)

func CommentCreateInputsToBoiler(am []*graphql_models.CommentCreateInput) []*models.Comment {
	ar := make([]*models.Comment, len(am))
	for i, m := range am {
		ar[i] = CommentCreateInputToBoiler(
			m,
		)
	}
	return ar
}

func CommentCreateInputToBoiler(
	m *graphql_models.CommentCreateInput,
) *models.Comment {
	if m == nil {
		return nil
	}
	r := &models.Comment{
		UserID:    helper.IDToBoiler(m.UserID),
		PostID:    helper.IDToBoiler(m.PostID),
		Title:     m.Title,
		Body:      m.Body,
		CreatedAt: helper.PointerIntToNullDotTime(m.CreatedAt),
		UpdatedAt: helper.PointerIntToNullDotTime(m.UpdatedAt),
		DeletedAt: helper.PointerIntToNullDotTime(m.DeletedAt),
	}
	return r
}

func CommentCreateInputToModelM(
	input map[string]interface{},
	m graphql_models.CommentCreateInput,
) models.M {
	modelM := models.M{}
	for key, _ := range input {
		switch key {
		case "userId":
			modelM[models.CommentColumns.UserID] = helper.IDToBoiler(m.UserID)
		case "postId":
			modelM[models.CommentColumns.PostID] = helper.IDToBoiler(m.PostID)
		case "title":
			modelM[models.CommentColumns.Title] = m.Title
		case "body":
			modelM[models.CommentColumns.Body] = m.Body
		case "createdAt":
			modelM[models.CommentColumns.CreatedAt] = helper.PointerIntToNullDotTime(m.CreatedAt)
		case "updatedAt":
			modelM[models.CommentColumns.UpdatedAt] = helper.PointerIntToNullDotTime(m.UpdatedAt)
		case "deletedAt":
			modelM[models.CommentColumns.DeletedAt] = helper.PointerIntToNullDotTime(m.DeletedAt)
		}
	}
	return modelM
}

func CommentCreateInputToBoilerWhitelist(input map[string]interface{}, extraColumns ...string) boil.Columns {
	columnsWhichAreSet := []string{}
	for key, _ := range input {
		switch key {
		case "userId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CommentColumns.UserID)
		case "postId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CommentColumns.PostID)
		case "title":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CommentColumns.Title)
		case "body":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CommentColumns.Body)
		case "createdAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CommentColumns.CreatedAt)
		case "updatedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CommentColumns.UpdatedAt)
		case "deletedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CommentColumns.DeletedAt)
		}
	}
	columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
	return boil.Whitelist(columnsWhichAreSet...)
}

func CommentUpdateInputsToBoiler(am []*graphql_models.CommentUpdateInput) []*models.Comment {
	ar := make([]*models.Comment, len(am))
	for i, m := range am {
		ar[i] = CommentUpdateInputToBoiler(
			m,
		)
	}
	return ar
}

func CommentUpdateInputToBoiler(
	m *graphql_models.CommentUpdateInput,
) *models.Comment {
	if m == nil {
		return nil
	}
	r := &models.Comment{
		UserID:    helper.IDToBoiler(helper.PointerStringToString(m.UserID)),
		PostID:    helper.IDToBoiler(helper.PointerStringToString(m.PostID)),
		Title:     helper.PointerStringToString(m.Title),
		Body:      helper.PointerStringToString(m.Body),
		CreatedAt: helper.PointerIntToNullDotTime(m.CreatedAt),
		UpdatedAt: helper.PointerIntToNullDotTime(m.UpdatedAt),
		DeletedAt: helper.PointerIntToNullDotTime(m.DeletedAt),
	}
	return r
}

func CommentUpdateInputToModelM(
	input map[string]interface{},
	m graphql_models.CommentUpdateInput,
) models.M {
	modelM := models.M{}
	for key, _ := range input {
		switch key {
		case "userId":
			modelM[models.CommentColumns.UserID] = helper.IDToBoiler(helper.PointerStringToString(m.UserID))
		case "postId":
			modelM[models.CommentColumns.PostID] = helper.IDToBoiler(helper.PointerStringToString(m.PostID))
		case "title":
			modelM[models.CommentColumns.Title] = helper.PointerStringToString(m.Title)
		case "body":
			modelM[models.CommentColumns.Body] = helper.PointerStringToString(m.Body)
		case "createdAt":
			modelM[models.CommentColumns.CreatedAt] = helper.PointerIntToNullDotTime(m.CreatedAt)
		case "updatedAt":
			modelM[models.CommentColumns.UpdatedAt] = helper.PointerIntToNullDotTime(m.UpdatedAt)
		case "deletedAt":
			modelM[models.CommentColumns.DeletedAt] = helper.PointerIntToNullDotTime(m.DeletedAt)
		}
	}
	return modelM
}

func CommentUpdateInputToBoilerWhitelist(input map[string]interface{}, extraColumns ...string) boil.Columns {
	columnsWhichAreSet := []string{}
	for key, _ := range input {
		switch key {
		case "userId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CommentColumns.UserID)
		case "postId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CommentColumns.PostID)
		case "title":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CommentColumns.Title)
		case "body":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CommentColumns.Body)
		case "createdAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CommentColumns.CreatedAt)
		case "updatedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CommentColumns.UpdatedAt)
		case "deletedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CommentColumns.DeletedAt)
		}
	}
	columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
	return boil.Whitelist(columnsWhichAreSet...)
}

func CompanyCreateInputsToBoiler(am []*graphql_models.CompanyCreateInput) []*models.Company {
	ar := make([]*models.Company, len(am))
	for i, m := range am {
		ar[i] = CompanyCreateInputToBoiler(
			m,
		)
	}
	return ar
}

func CompanyCreateInputToBoiler(
	m *graphql_models.CompanyCreateInput,
) *models.Company {
	if m == nil {
		return nil
	}
	r := &models.Company{
		Name:      helper.PointerStringToNullDotString(m.Name),
		Active:    helper.PointerBoolToNullDotBool(m.Active),
		CreatedAt: helper.PointerIntToNullDotTime(m.CreatedAt),
		DeletedAt: helper.PointerIntToNullDotTime(m.DeletedAt),
		UpdatedAt: helper.PointerIntToNullDotTime(m.UpdatedAt),
	}
	return r
}

func CompanyCreateInputToModelM(
	input map[string]interface{},
	m graphql_models.CompanyCreateInput,
) models.M {
	modelM := models.M{}
	for key, _ := range input {
		switch key {
		case "name":
			modelM[models.CompanyColumns.Name] = helper.PointerStringToNullDotString(m.Name)
		case "active":
			modelM[models.CompanyColumns.Active] = helper.PointerBoolToNullDotBool(m.Active)
		case "createdAt":
			modelM[models.CompanyColumns.CreatedAt] = helper.PointerIntToNullDotTime(m.CreatedAt)
		case "deletedAt":
			modelM[models.CompanyColumns.DeletedAt] = helper.PointerIntToNullDotTime(m.DeletedAt)
		case "updatedAt":
			modelM[models.CompanyColumns.UpdatedAt] = helper.PointerIntToNullDotTime(m.UpdatedAt)
		}
	}
	return modelM
}

func CompanyCreateInputToBoilerWhitelist(input map[string]interface{}, extraColumns ...string) boil.Columns {
	columnsWhichAreSet := []string{}
	for key, _ := range input {
		switch key {
		case "name":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CompanyColumns.Name)
		case "active":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CompanyColumns.Active)
		case "createdAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CompanyColumns.CreatedAt)
		case "deletedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CompanyColumns.DeletedAt)
		case "updatedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CompanyColumns.UpdatedAt)
		}
	}
	columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
	return boil.Whitelist(columnsWhichAreSet...)
}

func CompanyUpdateInputsToBoiler(am []*graphql_models.CompanyUpdateInput) []*models.Company {
	ar := make([]*models.Company, len(am))
	for i, m := range am {
		ar[i] = CompanyUpdateInputToBoiler(
			m,
		)
	}
	return ar
}

func CompanyUpdateInputToBoiler(
	m *graphql_models.CompanyUpdateInput,
) *models.Company {
	if m == nil {
		return nil
	}
	r := &models.Company{
		Name:      helper.PointerStringToNullDotString(m.Name),
		Active:    helper.PointerBoolToNullDotBool(m.Active),
		CreatedAt: helper.PointerIntToNullDotTime(m.CreatedAt),
		DeletedAt: helper.PointerIntToNullDotTime(m.DeletedAt),
		UpdatedAt: helper.PointerIntToNullDotTime(m.UpdatedAt),
	}
	return r
}

func CompanyUpdateInputToModelM(
	input map[string]interface{},
	m graphql_models.CompanyUpdateInput,
) models.M {
	modelM := models.M{}
	for key, _ := range input {
		switch key {
		case "name":
			modelM[models.CompanyColumns.Name] = helper.PointerStringToNullDotString(m.Name)
		case "active":
			modelM[models.CompanyColumns.Active] = helper.PointerBoolToNullDotBool(m.Active)
		case "createdAt":
			modelM[models.CompanyColumns.CreatedAt] = helper.PointerIntToNullDotTime(m.CreatedAt)
		case "deletedAt":
			modelM[models.CompanyColumns.DeletedAt] = helper.PointerIntToNullDotTime(m.DeletedAt)
		case "updatedAt":
			modelM[models.CompanyColumns.UpdatedAt] = helper.PointerIntToNullDotTime(m.UpdatedAt)
		}
	}
	return modelM
}

func CompanyUpdateInputToBoilerWhitelist(input map[string]interface{}, extraColumns ...string) boil.Columns {
	columnsWhichAreSet := []string{}
	for key, _ := range input {
		switch key {
		case "name":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CompanyColumns.Name)
		case "active":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CompanyColumns.Active)
		case "createdAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CompanyColumns.CreatedAt)
		case "deletedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CompanyColumns.DeletedAt)
		case "updatedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.CompanyColumns.UpdatedAt)
		}
	}
	columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
	return boil.Whitelist(columnsWhichAreSet...)
}

func FollowerCreateInputsToBoiler(am []*graphql_models.FollowerCreateInput) []*models.Follower {
	ar := make([]*models.Follower, len(am))
	for i, m := range am {
		ar[i] = FollowerCreateInputToBoiler(
			m,
		)
	}
	return ar
}

func FollowerCreateInputToBoiler(
	m *graphql_models.FollowerCreateInput,
) *models.Follower {
	if m == nil {
		return nil
	}
	r := &models.Follower{
		FollowerID: helper.IDToBoiler(m.FollowerID),
		FolloweeID: helper.IDToBoiler(m.FolloweeID),
		CreatedAt:  helper.PointerIntToNullDotTime(m.CreatedAt),
		UpdatedAt:  helper.PointerIntToNullDotTime(m.UpdatedAt),
		DeletedAt:  helper.PointerIntToNullDotTime(m.DeletedAt),
	}
	return r
}

func FollowerCreateInputToModelM(
	input map[string]interface{},
	m graphql_models.FollowerCreateInput,
) models.M {
	modelM := models.M{}
	for key, _ := range input {
		switch key {
		case "followerId":
			modelM[models.FollowerColumns.FollowerID] = helper.IDToBoiler(m.FollowerID)
		case "followeeId":
			modelM[models.FollowerColumns.FolloweeID] = helper.IDToBoiler(m.FolloweeID)
		case "createdAt":
			modelM[models.FollowerColumns.CreatedAt] = helper.PointerIntToNullDotTime(m.CreatedAt)
		case "updatedAt":
			modelM[models.FollowerColumns.UpdatedAt] = helper.PointerIntToNullDotTime(m.UpdatedAt)
		case "deletedAt":
			modelM[models.FollowerColumns.DeletedAt] = helper.PointerIntToNullDotTime(m.DeletedAt)
		}
	}
	return modelM
}

func FollowerCreateInputToBoilerWhitelist(input map[string]interface{}, extraColumns ...string) boil.Columns {
	columnsWhichAreSet := []string{}
	for key, _ := range input {
		switch key {
		case "followerId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.FollowerColumns.FollowerID)
		case "followeeId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.FollowerColumns.FolloweeID)
		case "createdAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.FollowerColumns.CreatedAt)
		case "updatedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.FollowerColumns.UpdatedAt)
		case "deletedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.FollowerColumns.DeletedAt)
		}
	}
	columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
	return boil.Whitelist(columnsWhichAreSet...)
}

func FollowerUpdateInputsToBoiler(am []*graphql_models.FollowerUpdateInput) []*models.Follower {
	ar := make([]*models.Follower, len(am))
	for i, m := range am {
		ar[i] = FollowerUpdateInputToBoiler(
			m,
		)
	}
	return ar
}

func FollowerUpdateInputToBoiler(
	m *graphql_models.FollowerUpdateInput,
) *models.Follower {
	if m == nil {
		return nil
	}
	r := &models.Follower{
		FollowerID: helper.IDToBoiler(helper.PointerStringToString(m.FollowerID)),
		FolloweeID: helper.IDToBoiler(helper.PointerStringToString(m.FolloweeID)),
		CreatedAt:  helper.PointerIntToNullDotTime(m.CreatedAt),
		UpdatedAt:  helper.PointerIntToNullDotTime(m.UpdatedAt),
		DeletedAt:  helper.PointerIntToNullDotTime(m.DeletedAt),
	}
	return r
}

func FollowerUpdateInputToModelM(
	input map[string]interface{},
	m graphql_models.FollowerUpdateInput,
) models.M {
	modelM := models.M{}
	for key, _ := range input {
		switch key {
		case "followerId":
			modelM[models.FollowerColumns.FollowerID] = helper.IDToBoiler(helper.PointerStringToString(m.FollowerID))
		case "followeeId":
			modelM[models.FollowerColumns.FolloweeID] = helper.IDToBoiler(helper.PointerStringToString(m.FolloweeID))
		case "createdAt":
			modelM[models.FollowerColumns.CreatedAt] = helper.PointerIntToNullDotTime(m.CreatedAt)
		case "updatedAt":
			modelM[models.FollowerColumns.UpdatedAt] = helper.PointerIntToNullDotTime(m.UpdatedAt)
		case "deletedAt":
			modelM[models.FollowerColumns.DeletedAt] = helper.PointerIntToNullDotTime(m.DeletedAt)
		}
	}
	return modelM
}

func FollowerUpdateInputToBoilerWhitelist(input map[string]interface{}, extraColumns ...string) boil.Columns {
	columnsWhichAreSet := []string{}
	for key, _ := range input {
		switch key {
		case "followerId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.FollowerColumns.FollowerID)
		case "followeeId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.FollowerColumns.FolloweeID)
		case "createdAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.FollowerColumns.CreatedAt)
		case "updatedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.FollowerColumns.UpdatedAt)
		case "deletedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.FollowerColumns.DeletedAt)
		}
	}
	columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
	return boil.Whitelist(columnsWhichAreSet...)
}

func LocationCreateInputsToBoiler(am []*graphql_models.LocationCreateInput) []*models.Location {
	ar := make([]*models.Location, len(am))
	for i, m := range am {
		ar[i] = LocationCreateInputToBoiler(
			m,
		)
	}
	return ar
}

func LocationCreateInputToBoiler(
	m *graphql_models.LocationCreateInput,
) *models.Location {
	if m == nil {
		return nil
	}
	r := &models.Location{
		Name:      helper.PointerStringToNullDotString(m.Name),
		Active:    helper.PointerBoolToNullDotBool(m.Active),
		Address:   helper.PointerStringToNullDotString(m.Address),
		CompanyID: helper.IDToBoiler(m.CompanyID),
		CreatedAt: helper.PointerIntToNullDotTime(m.CreatedAt),
		DeletedAt: helper.PointerIntToNullDotTime(m.DeletedAt),
		UpdatedAt: helper.PointerIntToNullDotTime(m.UpdatedAt),
	}
	return r
}

func LocationCreateInputToModelM(
	input map[string]interface{},
	m graphql_models.LocationCreateInput,
) models.M {
	modelM := models.M{}
	for key, _ := range input {
		switch key {
		case "name":
			modelM[models.LocationColumns.Name] = helper.PointerStringToNullDotString(m.Name)
		case "active":
			modelM[models.LocationColumns.Active] = helper.PointerBoolToNullDotBool(m.Active)
		case "address":
			modelM[models.LocationColumns.Address] = helper.PointerStringToNullDotString(m.Address)
		case "companyId":
			modelM[models.LocationColumns.CompanyID] = helper.IDToBoiler(m.CompanyID)
		case "createdAt":
			modelM[models.LocationColumns.CreatedAt] = helper.PointerIntToNullDotTime(m.CreatedAt)
		case "deletedAt":
			modelM[models.LocationColumns.DeletedAt] = helper.PointerIntToNullDotTime(m.DeletedAt)
		case "updatedAt":
			modelM[models.LocationColumns.UpdatedAt] = helper.PointerIntToNullDotTime(m.UpdatedAt)
		}
	}
	return modelM
}

func LocationCreateInputToBoilerWhitelist(input map[string]interface{}, extraColumns ...string) boil.Columns {
	columnsWhichAreSet := []string{}
	for key, _ := range input {
		switch key {
		case "name":
			columnsWhichAreSet = append(columnsWhichAreSet, models.LocationColumns.Name)
		case "active":
			columnsWhichAreSet = append(columnsWhichAreSet, models.LocationColumns.Active)
		case "address":
			columnsWhichAreSet = append(columnsWhichAreSet, models.LocationColumns.Address)
		case "companyId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.LocationColumns.CompanyID)
		case "createdAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.LocationColumns.CreatedAt)
		case "deletedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.LocationColumns.DeletedAt)
		case "updatedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.LocationColumns.UpdatedAt)
		}
	}
	columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
	return boil.Whitelist(columnsWhichAreSet...)
}

func LocationUpdateInputsToBoiler(am []*graphql_models.LocationUpdateInput) []*models.Location {
	ar := make([]*models.Location, len(am))
	for i, m := range am {
		ar[i] = LocationUpdateInputToBoiler(
			m,
		)
	}
	return ar
}

func LocationUpdateInputToBoiler(
	m *graphql_models.LocationUpdateInput,
) *models.Location {
	if m == nil {
		return nil
	}
	r := &models.Location{
		Name:      helper.PointerStringToNullDotString(m.Name),
		Active:    helper.PointerBoolToNullDotBool(m.Active),
		Address:   helper.PointerStringToNullDotString(m.Address),
		CompanyID: helper.IDToBoiler(helper.PointerStringToString(m.CompanyID)),
		CreatedAt: helper.PointerIntToNullDotTime(m.CreatedAt),
		DeletedAt: helper.PointerIntToNullDotTime(m.DeletedAt),
		UpdatedAt: helper.PointerIntToNullDotTime(m.UpdatedAt),
	}
	return r
}

func LocationUpdateInputToModelM(
	input map[string]interface{},
	m graphql_models.LocationUpdateInput,
) models.M {
	modelM := models.M{}
	for key, _ := range input {
		switch key {
		case "name":
			modelM[models.LocationColumns.Name] = helper.PointerStringToNullDotString(m.Name)
		case "active":
			modelM[models.LocationColumns.Active] = helper.PointerBoolToNullDotBool(m.Active)
		case "address":
			modelM[models.LocationColumns.Address] = helper.PointerStringToNullDotString(m.Address)
		case "companyId":
			modelM[models.LocationColumns.CompanyID] = helper.IDToBoiler(helper.PointerStringToString(m.CompanyID))
		case "createdAt":
			modelM[models.LocationColumns.CreatedAt] = helper.PointerIntToNullDotTime(m.CreatedAt)
		case "deletedAt":
			modelM[models.LocationColumns.DeletedAt] = helper.PointerIntToNullDotTime(m.DeletedAt)
		case "updatedAt":
			modelM[models.LocationColumns.UpdatedAt] = helper.PointerIntToNullDotTime(m.UpdatedAt)
		}
	}
	return modelM
}

func LocationUpdateInputToBoilerWhitelist(input map[string]interface{}, extraColumns ...string) boil.Columns {
	columnsWhichAreSet := []string{}
	for key, _ := range input {
		switch key {
		case "name":
			columnsWhichAreSet = append(columnsWhichAreSet, models.LocationColumns.Name)
		case "active":
			columnsWhichAreSet = append(columnsWhichAreSet, models.LocationColumns.Active)
		case "address":
			columnsWhichAreSet = append(columnsWhichAreSet, models.LocationColumns.Address)
		case "companyId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.LocationColumns.CompanyID)
		case "createdAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.LocationColumns.CreatedAt)
		case "deletedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.LocationColumns.DeletedAt)
		case "updatedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.LocationColumns.UpdatedAt)
		}
	}
	columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
	return boil.Whitelist(columnsWhichAreSet...)
}

func PostCreateInputsToBoiler(am []*graphql_models.PostCreateInput) []*models.Post {
	ar := make([]*models.Post, len(am))
	for i, m := range am {
		ar[i] = PostCreateInputToBoiler(
			m,
		)
	}
	return ar
}

func PostCreateInputToBoiler(
	m *graphql_models.PostCreateInput,
) *models.Post {
	if m == nil {
		return nil
	}
	r := &models.Post{
		UserID:    helper.IDToBoiler(m.UserID),
		Title:     m.Title,
		Body:      m.Body,
		DeletedAt: helper.PointerIntToNullDotTime(m.DeletedAt),
		CreatedAt: helper.PointerIntToNullDotTime(m.CreatedAt),
		UpdatedAt: helper.PointerIntToNullDotTime(m.UpdatedAt),
	}
	return r
}

func PostCreateInputToModelM(
	input map[string]interface{},
	m graphql_models.PostCreateInput,
) models.M {
	modelM := models.M{}
	for key, _ := range input {
		switch key {
		case "userId":
			modelM[models.PostColumns.UserID] = helper.IDToBoiler(m.UserID)
		case "title":
			modelM[models.PostColumns.Title] = m.Title
		case "body":
			modelM[models.PostColumns.Body] = m.Body
		case "deletedAt":
			modelM[models.PostColumns.DeletedAt] = helper.PointerIntToNullDotTime(m.DeletedAt)
		case "createdAt":
			modelM[models.PostColumns.CreatedAt] = helper.PointerIntToNullDotTime(m.CreatedAt)
		case "updatedAt":
			modelM[models.PostColumns.UpdatedAt] = helper.PointerIntToNullDotTime(m.UpdatedAt)
		}
	}
	return modelM
}

func PostCreateInputToBoilerWhitelist(input map[string]interface{}, extraColumns ...string) boil.Columns {
	columnsWhichAreSet := []string{}
	for key, _ := range input {
		switch key {
		case "userId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.PostColumns.UserID)
		case "title":
			columnsWhichAreSet = append(columnsWhichAreSet, models.PostColumns.Title)
		case "body":
			columnsWhichAreSet = append(columnsWhichAreSet, models.PostColumns.Body)
		case "deletedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.PostColumns.DeletedAt)
		case "createdAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.PostColumns.CreatedAt)
		case "updatedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.PostColumns.UpdatedAt)
		}
	}
	columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
	return boil.Whitelist(columnsWhichAreSet...)
}

func PostUpdateInputsToBoiler(am []*graphql_models.PostUpdateInput) []*models.Post {
	ar := make([]*models.Post, len(am))
	for i, m := range am {
		ar[i] = PostUpdateInputToBoiler(
			m,
		)
	}
	return ar
}

func PostUpdateInputToBoiler(
	m *graphql_models.PostUpdateInput,
) *models.Post {
	if m == nil {
		return nil
	}
	r := &models.Post{
		UserID:    helper.IDToBoiler(helper.PointerStringToString(m.UserID)),
		Title:     helper.PointerStringToString(m.Title),
		Body:      helper.PointerStringToString(m.Body),
		DeletedAt: helper.PointerIntToNullDotTime(m.DeletedAt),
		CreatedAt: helper.PointerIntToNullDotTime(m.CreatedAt),
		UpdatedAt: helper.PointerIntToNullDotTime(m.UpdatedAt),
	}
	return r
}

func PostUpdateInputToModelM(
	input map[string]interface{},
	m graphql_models.PostUpdateInput,
) models.M {
	modelM := models.M{}
	for key, _ := range input {
		switch key {
		case "userId":
			modelM[models.PostColumns.UserID] = helper.IDToBoiler(helper.PointerStringToString(m.UserID))
		case "title":
			modelM[models.PostColumns.Title] = helper.PointerStringToString(m.Title)
		case "body":
			modelM[models.PostColumns.Body] = helper.PointerStringToString(m.Body)
		case "deletedAt":
			modelM[models.PostColumns.DeletedAt] = helper.PointerIntToNullDotTime(m.DeletedAt)
		case "createdAt":
			modelM[models.PostColumns.CreatedAt] = helper.PointerIntToNullDotTime(m.CreatedAt)
		case "updatedAt":
			modelM[models.PostColumns.UpdatedAt] = helper.PointerIntToNullDotTime(m.UpdatedAt)
		}
	}
	return modelM
}

func PostUpdateInputToBoilerWhitelist(input map[string]interface{}, extraColumns ...string) boil.Columns {
	columnsWhichAreSet := []string{}
	for key, _ := range input {
		switch key {
		case "userId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.PostColumns.UserID)
		case "title":
			columnsWhichAreSet = append(columnsWhichAreSet, models.PostColumns.Title)
		case "body":
			columnsWhichAreSet = append(columnsWhichAreSet, models.PostColumns.Body)
		case "deletedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.PostColumns.DeletedAt)
		case "createdAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.PostColumns.CreatedAt)
		case "updatedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.PostColumns.UpdatedAt)
		}
	}
	columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
	return boil.Whitelist(columnsWhichAreSet...)
}

func RoleCreateInputsToBoiler(am []*graphql_models.RoleCreateInput) []*models.Role {
	ar := make([]*models.Role, len(am))
	for i, m := range am {
		ar[i] = RoleCreateInputToBoiler(
			m,
		)
	}
	return ar
}

func RoleCreateInputToBoiler(
	m *graphql_models.RoleCreateInput,
) *models.Role {
	if m == nil {
		return nil
	}
	r := &models.Role{
		AccessLevel: m.AccessLevel,
		Name:        m.Name,
		UpdatedAt:   helper.PointerIntToNullDotTime(m.UpdatedAt),
		CreatedAt:   helper.PointerIntToNullDotTime(m.CreatedAt),
		DeletedAt:   helper.PointerIntToNullDotTime(m.DeletedAt),
	}
	return r
}

func RoleCreateInputToModelM(
	input map[string]interface{},
	m graphql_models.RoleCreateInput,
) models.M {
	modelM := models.M{}
	for key, _ := range input {
		switch key {
		case "accessLevel":
			modelM[models.RoleColumns.AccessLevel] = m.AccessLevel
		case "name":
			modelM[models.RoleColumns.Name] = m.Name
		case "updatedAt":
			modelM[models.RoleColumns.UpdatedAt] = helper.PointerIntToNullDotTime(m.UpdatedAt)
		case "createdAt":
			modelM[models.RoleColumns.CreatedAt] = helper.PointerIntToNullDotTime(m.CreatedAt)
		case "deletedAt":
			modelM[models.RoleColumns.DeletedAt] = helper.PointerIntToNullDotTime(m.DeletedAt)
		}
	}
	return modelM
}

func RoleCreateInputToBoilerWhitelist(input map[string]interface{}, extraColumns ...string) boil.Columns {
	columnsWhichAreSet := []string{}
	for key, _ := range input {
		switch key {
		case "accessLevel":
			columnsWhichAreSet = append(columnsWhichAreSet, models.RoleColumns.AccessLevel)
		case "name":
			columnsWhichAreSet = append(columnsWhichAreSet, models.RoleColumns.Name)
		case "updatedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.RoleColumns.UpdatedAt)
		case "createdAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.RoleColumns.CreatedAt)
		case "deletedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.RoleColumns.DeletedAt)
		}
	}
	columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
	return boil.Whitelist(columnsWhichAreSet...)
}

func RoleUpdateInputsToBoiler(am []*graphql_models.RoleUpdateInput) []*models.Role {
	ar := make([]*models.Role, len(am))
	for i, m := range am {
		ar[i] = RoleUpdateInputToBoiler(
			m,
		)
	}
	return ar
}

func RoleUpdateInputToBoiler(
	m *graphql_models.RoleUpdateInput,
) *models.Role {
	if m == nil {
		return nil
	}
	r := &models.Role{
		AccessLevel: helper.PointerIntToInt(m.AccessLevel),
		Name:        helper.PointerStringToString(m.Name),
		UpdatedAt:   helper.PointerIntToNullDotTime(m.UpdatedAt),
		CreatedAt:   helper.PointerIntToNullDotTime(m.CreatedAt),
		DeletedAt:   helper.PointerIntToNullDotTime(m.DeletedAt),
	}
	return r
}

func RoleUpdateInputToModelM(
	input map[string]interface{},
	m graphql_models.RoleUpdateInput,
) models.M {
	modelM := models.M{}
	for key, _ := range input {
		switch key {
		case "accessLevel":
			modelM[models.RoleColumns.AccessLevel] = helper.PointerIntToInt(m.AccessLevel)
		case "name":
			modelM[models.RoleColumns.Name] = helper.PointerStringToString(m.Name)
		case "updatedAt":
			modelM[models.RoleColumns.UpdatedAt] = helper.PointerIntToNullDotTime(m.UpdatedAt)
		case "createdAt":
			modelM[models.RoleColumns.CreatedAt] = helper.PointerIntToNullDotTime(m.CreatedAt)
		case "deletedAt":
			modelM[models.RoleColumns.DeletedAt] = helper.PointerIntToNullDotTime(m.DeletedAt)
		}
	}
	return modelM
}

func RoleUpdateInputToBoilerWhitelist(input map[string]interface{}, extraColumns ...string) boil.Columns {
	columnsWhichAreSet := []string{}
	for key, _ := range input {
		switch key {
		case "accessLevel":
			columnsWhichAreSet = append(columnsWhichAreSet, models.RoleColumns.AccessLevel)
		case "name":
			columnsWhichAreSet = append(columnsWhichAreSet, models.RoleColumns.Name)
		case "updatedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.RoleColumns.UpdatedAt)
		case "createdAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.RoleColumns.CreatedAt)
		case "deletedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.RoleColumns.DeletedAt)
		}
	}
	columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
	return boil.Whitelist(columnsWhichAreSet...)
}

func UserCreateInputsToBoiler(am []*graphql_models.UserCreateInput) []*models.User {
	ar := make([]*models.User, len(am))
	for i, m := range am {
		ar[i] = UserCreateInputToBoiler(
			m,
		)
	}
	return ar
}

func UserCreateInputToBoiler(
	m *graphql_models.UserCreateInput,
) *models.User {
	if m == nil {
		return nil
	}
	r := &models.User{
		FirstName:          helper.PointerStringToNullDotString(m.FirstName),
		LastName:           helper.PointerStringToNullDotString(m.LastName),
		Username:           helper.PointerStringToNullDotString(m.Username),
		Password:           helper.PointerStringToNullDotString(m.Password),
		Email:              helper.PointerStringToNullDotString(m.Email),
		Mobile:             helper.PointerStringToNullDotString(m.Mobile),
		Phone:              helper.PointerStringToNullDotString(m.Phone),
		Address:            helper.PointerStringToNullDotString(m.Address),
		Active:             helper.PointerBoolToNullDotBool(m.Active),
		LastLogin:          helper.PointerIntToNullDotTime(m.LastLogin),
		LastPasswordChange: helper.PointerIntToNullDotTime(m.LastPasswordChange),
		Token:              helper.PointerStringToNullDotString(m.Token),
		RoleID:             helper.IDToNullBoiler(helper.PointerStringToString(m.RoleID)),
		CompanyID:          helper.IDToNullBoiler(helper.PointerStringToString(m.CompanyID)),
		LocationID:         helper.IDToNullBoiler(helper.PointerStringToString(m.LocationID)),
		DeletedAt:          helper.PointerIntToNullDotTime(m.DeletedAt),
		CreatedAt:          helper.PointerIntToNullDotTime(m.CreatedAt),
		UpdatedAt:          helper.PointerIntToNullDotTime(m.UpdatedAt),
	}
	return r
}

func UserCreateInputToModelM(
	input map[string]interface{},
	m graphql_models.UserCreateInput,
) models.M {
	modelM := models.M{}
	for key, _ := range input {
		switch key {
		case "firstName":
			modelM[models.UserColumns.FirstName] = helper.PointerStringToNullDotString(m.FirstName)
		case "lastName":
			modelM[models.UserColumns.LastName] = helper.PointerStringToNullDotString(m.LastName)
		case "username":
			modelM[models.UserColumns.Username] = helper.PointerStringToNullDotString(m.Username)
		case "password":
			modelM[models.UserColumns.Password] = helper.PointerStringToNullDotString(m.Password)
		case "email":
			modelM[models.UserColumns.Email] = helper.PointerStringToNullDotString(m.Email)
		case "mobile":
			modelM[models.UserColumns.Mobile] = helper.PointerStringToNullDotString(m.Mobile)
		case "phone":
			modelM[models.UserColumns.Phone] = helper.PointerStringToNullDotString(m.Phone)
		case "address":
			modelM[models.UserColumns.Address] = helper.PointerStringToNullDotString(m.Address)
		case "active":
			modelM[models.UserColumns.Active] = helper.PointerBoolToNullDotBool(m.Active)
		case "lastLogin":
			modelM[models.UserColumns.LastLogin] = helper.PointerIntToNullDotTime(m.LastLogin)
		case "lastPasswordChange":
			modelM[models.UserColumns.LastPasswordChange] = helper.PointerIntToNullDotTime(m.LastPasswordChange)
		case "token":
			modelM[models.UserColumns.Token] = helper.PointerStringToNullDotString(m.Token)
		case "roleId":
			modelM[models.UserColumns.RoleID] = helper.IDToNullBoiler(helper.PointerStringToString(m.RoleID))
		case "companyId":
			modelM[models.UserColumns.CompanyID] = helper.IDToNullBoiler(helper.PointerStringToString(m.CompanyID))
		case "locationId":
			modelM[models.UserColumns.LocationID] = helper.IDToNullBoiler(helper.PointerStringToString(m.LocationID))
		case "deletedAt":
			modelM[models.UserColumns.DeletedAt] = helper.PointerIntToNullDotTime(m.DeletedAt)
		case "createdAt":
			modelM[models.UserColumns.CreatedAt] = helper.PointerIntToNullDotTime(m.CreatedAt)
		case "updatedAt":
			modelM[models.UserColumns.UpdatedAt] = helper.PointerIntToNullDotTime(m.UpdatedAt)
		}
	}
	return modelM
}

func UserCreateInputToBoilerWhitelist(input map[string]interface{}, extraColumns ...string) boil.Columns {
	columnsWhichAreSet := []string{}
	for key, _ := range input {
		switch key {
		case "firstName":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.FirstName)
		case "lastName":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.LastName)
		case "username":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.Username)
		case "password":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.Password)
		case "email":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.Email)
		case "mobile":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.Mobile)
		case "phone":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.Phone)
		case "address":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.Address)
		case "active":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.Active)
		case "lastLogin":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.LastLogin)
		case "lastPasswordChange":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.LastPasswordChange)
		case "token":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.Token)
		case "roleId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.RoleID)
		case "companyId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.CompanyID)
		case "locationId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.LocationID)
		case "deletedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.DeletedAt)
		case "createdAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.CreatedAt)
		case "updatedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.UpdatedAt)
		}
	}
	columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
	return boil.Whitelist(columnsWhichAreSet...)
}

func UserUpdateInputsToBoiler(am []*graphql_models.UserUpdateInput) []*models.User {
	ar := make([]*models.User, len(am))
	for i, m := range am {
		ar[i] = UserUpdateInputToBoiler(
			m,
		)
	}
	return ar
}

func UserUpdateInputToBoiler(
	m *graphql_models.UserUpdateInput,
) *models.User {
	if m == nil {
		return nil
	}
	r := &models.User{
		FirstName:          helper.PointerStringToNullDotString(m.FirstName),
		LastName:           helper.PointerStringToNullDotString(m.LastName),
		Username:           helper.PointerStringToNullDotString(m.Username),
		Password:           helper.PointerStringToNullDotString(m.Password),
		Email:              helper.PointerStringToNullDotString(m.Email),
		Mobile:             helper.PointerStringToNullDotString(m.Mobile),
		Phone:              helper.PointerStringToNullDotString(m.Phone),
		Address:            helper.PointerStringToNullDotString(m.Address),
		Active:             helper.PointerBoolToNullDotBool(m.Active),
		LastLogin:          helper.PointerIntToNullDotTime(m.LastLogin),
		LastPasswordChange: helper.PointerIntToNullDotTime(m.LastPasswordChange),
		Token:              helper.PointerStringToNullDotString(m.Token),
		RoleID:             helper.IDToNullBoiler(helper.PointerStringToString(m.RoleID)),
		CompanyID:          helper.IDToNullBoiler(helper.PointerStringToString(m.CompanyID)),
		LocationID:         helper.IDToNullBoiler(helper.PointerStringToString(m.LocationID)),
		DeletedAt:          helper.PointerIntToNullDotTime(m.DeletedAt),
		CreatedAt:          helper.PointerIntToNullDotTime(m.CreatedAt),
		UpdatedAt:          helper.PointerIntToNullDotTime(m.UpdatedAt),
	}
	return r
}

func UserUpdateInputToModelM(
	input map[string]interface{},
	m graphql_models.UserUpdateInput,
) models.M {
	modelM := models.M{}
	for key, _ := range input {
		switch key {
		case "firstName":
			modelM[models.UserColumns.FirstName] = helper.PointerStringToNullDotString(m.FirstName)
		case "lastName":
			modelM[models.UserColumns.LastName] = helper.PointerStringToNullDotString(m.LastName)
		case "username":
			modelM[models.UserColumns.Username] = helper.PointerStringToNullDotString(m.Username)
		case "password":
			modelM[models.UserColumns.Password] = helper.PointerStringToNullDotString(m.Password)
		case "email":
			modelM[models.UserColumns.Email] = helper.PointerStringToNullDotString(m.Email)
		case "mobile":
			modelM[models.UserColumns.Mobile] = helper.PointerStringToNullDotString(m.Mobile)
		case "phone":
			modelM[models.UserColumns.Phone] = helper.PointerStringToNullDotString(m.Phone)
		case "address":
			modelM[models.UserColumns.Address] = helper.PointerStringToNullDotString(m.Address)
		case "active":
			modelM[models.UserColumns.Active] = helper.PointerBoolToNullDotBool(m.Active)
		case "lastLogin":
			modelM[models.UserColumns.LastLogin] = helper.PointerIntToNullDotTime(m.LastLogin)
		case "lastPasswordChange":
			modelM[models.UserColumns.LastPasswordChange] = helper.PointerIntToNullDotTime(m.LastPasswordChange)
		case "token":
			modelM[models.UserColumns.Token] = helper.PointerStringToNullDotString(m.Token)
		case "roleId":
			modelM[models.UserColumns.RoleID] = helper.IDToNullBoiler(helper.PointerStringToString(m.RoleID))
		case "companyId":
			modelM[models.UserColumns.CompanyID] = helper.IDToNullBoiler(helper.PointerStringToString(m.CompanyID))
		case "locationId":
			modelM[models.UserColumns.LocationID] = helper.IDToNullBoiler(helper.PointerStringToString(m.LocationID))
		case "deletedAt":
			modelM[models.UserColumns.DeletedAt] = helper.PointerIntToNullDotTime(m.DeletedAt)
		case "createdAt":
			modelM[models.UserColumns.CreatedAt] = helper.PointerIntToNullDotTime(m.CreatedAt)
		case "updatedAt":
			modelM[models.UserColumns.UpdatedAt] = helper.PointerIntToNullDotTime(m.UpdatedAt)
		}
	}
	return modelM
}

func UserUpdateInputToBoilerWhitelist(input map[string]interface{}, extraColumns ...string) boil.Columns {
	columnsWhichAreSet := []string{}
	for key, _ := range input {
		switch key {
		case "firstName":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.FirstName)
		case "lastName":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.LastName)
		case "username":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.Username)
		case "password":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.Password)
		case "email":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.Email)
		case "mobile":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.Mobile)
		case "phone":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.Phone)
		case "address":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.Address)
		case "active":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.Active)
		case "lastLogin":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.LastLogin)
		case "lastPasswordChange":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.LastPasswordChange)
		case "token":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.Token)
		case "roleId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.RoleID)
		case "companyId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.CompanyID)
		case "locationId":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.LocationID)
		case "deletedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.DeletedAt)
		case "createdAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.CreatedAt)
		case "updatedAt":
			columnsWhichAreSet = append(columnsWhichAreSet, models.UserColumns.UpdatedAt)
		}
	}
	columnsWhichAreSet = append(columnsWhichAreSet, extraColumns...)
	return boil.Whitelist(columnsWhichAreSet...)
}
