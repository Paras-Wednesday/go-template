package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"

	"go-template/daos"
	"go-template/gqlmodels"
	"go-template/internal/middleware/auth"
	"go-template/models"
	"go-template/pkg/utl/cnvrttogql"
	"go-template/pkg/utl/convert"
	"go-template/pkg/utl/resultwrapper"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input gqlmodels.PostCreateInput) (*gqlmodels.Post, error) {
	newPost := models.Post{
		AuthorID: auth.AuthorIDFromContext(ctx),
		Content:  input.Content,
	}

	createdPost, err := daos.CreatePost(ctx, newPost)
	if err != nil {
		return nil, resultwrapper.ResolverSQLError(err, "post create")
	}
	return cnvrttogql.PostToGraphqlPost(&createdPost), nil
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, input gqlmodels.PostUpdateInput) (*gqlmodels.Post, error) {
	authorID := auth.AuthorIDFromContext(ctx)
	post, err := daos.FindPostForAuthorByID(ctx, authorID, convert.StringToInt(input.ID))
	if err != nil {
		return nil, resultwrapper.ResolverSQLError(err, "post fetch")
	}
	// update the content
	post.Content = input.Content

	updatedPost, err := daos.UpdatePost(ctx, *post)
	if err != nil {
		return nil, resultwrapper.ResolverSQLError(err, "post create")
	}
	return cnvrttogql.PostToGraphqlPost(&updatedPost), nil
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, input gqlmodels.PostDeleteInput) (*gqlmodels.Post, error) {
	authorID := auth.AuthorIDFromContext(ctx)
	post, err := daos.FindPostForAuthorByID(ctx, authorID, convert.StringToInt(input.ID))
	if err != nil {
		return nil, resultwrapper.ResolverSQLError(err, "post fetch")
	}

	deleteCount, err := daos.DeletePost(ctx, *post)
	if err != nil {
		return nil, resultwrapper.ResolverSQLError(err, "post delete")
	}
	if deleteCount == 0 {
		return nil, resultwrapper.ResolverWrapperFromMessage(500, "no post deleted")
	}
	return cnvrttogql.PostToGraphqlPost(post), nil
}
