package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"go-template/daos"
	"go-template/gqlmodels"
	"go-template/internal/middleware/auth"
	"go-template/pkg/utl/cnvrttogql"
	"go-template/pkg/utl/convert"
	"go-template/pkg/utl/resultwrapper"
	"net/http"

	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

// PostByID is the resolver for the postByID field.
func (r *queryResolver) PostByID(ctx context.Context, id string) (*gqlmodels.Post, error) {
	authorID := auth.AuthorIDFromContext(ctx)
	post, err := daos.FindPostForAuthorByID(ctx, authorID, convert.StringToInt(id))
	if err != nil {
		return nil, resultwrapper.ResolverSQLError(err, "post fetch")
	}
	return cnvrttogql.PostToGraphqlPost(post), nil
}

// AllPostByAuthor is the resolver for the allPostByAuthor field.
func (r *queryResolver) AllPostByAuthor(ctx context.Context, pagination gqlmodels.Pagination) (*gqlmodels.PostsPayload, error) {
	if pagination.Limit < 0 || pagination.Page < 1 {
		return nil, resultwrapper.ResolverWrapperFromMessage(
			http.StatusBadRequest, "pagination or limit can not be negative")
	}

	posts, count, err := daos.FindAllPostByAuthorWithCount(
		ctx,
		auth.AuthorIDFromContext(ctx),
		qm.Limit(pagination.Limit),
		qm.Offset(pagination.Limit*(pagination.Page-1)),
	)
	if err != nil {
		return nil, resultwrapper.ResolverSQLError(err, "fetch author's post with pagination")
	}
	return cnvrttogql.PostsToGraphqlPostsPayload(posts, count), nil
}
