type Role {
  id: ID!
  accessLevel: Int!
  name: String!
  updatedAt: Int
  deletedAt: Int
  createdAt: Int
  users: [User]
}

type User {
  id: ID!
  firstName: String
  lastName: String
  username: String
  password: String
  email: String
  mobile: String
  phone: String
  address: String
  active: Boolean
  lastLogin: Int
  lastPasswordChange: Int
  token: String
  role: Role
  createdAt: Int
  deletedAt: Int
  updatedAt: Int
}

input IDFilter {
  equalTo: ID
  notEqualTo: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFilter {
  equalTo: String
  notEqualTo: String

  in: [String!]
  notIn: [String!]

  startWith: String
  notStartWith: String

  endWith: String
  notEndWith: String

  contain: String
  notContain: String

  startWithStrict: String # Camel sensitive
  notStartWithStrict: String # Camel sensitive
  endWithStrict: String # Camel sensitive
  notEndWithStrict: String # Camel sensitive
  containStrict: String # Camel sensitive
  notContainStrict: String # Camel sensitive
}

input IntFilter {
  equalTo: Int
  notEqualTo: Int
  lessThan: Int
  lessThanOrEqualTo: Int
  moreThan: Int
  moreThanOrEqualTo: Int
  in: [Int!]
  notIn: [Int!]
}

input FloatFilter {
  equalTo: Float
  notEqualTo: Float
  lessThan: Float
  lessThanOrEqualTo: Float
  moreThan: Float
  moreThanOrEqualTo: Float
  in: [Float!]
  notIn: [Float!]
}

input BooleanFilter {
  isTrue: Boolean
  isFalse: Boolean
  isNull: Boolean
}

input RoleFilter {
  search: String
  where: RoleWhere
}

input RolePagination {
  limit: Int!
  page: Int!
}

input RoleWhere {
  id: IDFilter
  accessLevel: IntFilter
  name: StringFilter
  updatedAt: IntFilter
  deletedAt: IntFilter
  createdAt: IntFilter
  users: UserWhere
  or: RoleWhere
  and: RoleWhere
}

input UserFilter {
  search: String
  where: UserWhere
}

input UserPagination {
  limit: Int!
  page: Int!
}

input UserWhere {
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  username: StringFilter
  password: StringFilter
  email: StringFilter
  mobile: StringFilter
  phone: StringFilter
  address: StringFilter
  active: BooleanFilter
  lastLogin: IntFilter
  lastPasswordChange: IntFilter
  token: StringFilter
  role: RoleWhere
  createdAt: IntFilter
  deletedAt: IntFilter
  updatedAt: IntFilter
  or: UserWhere
  and: UserWhere
}

type LoginResponse {
  token: String!
  refreshToken: String!
}

type Query {
  me: User!
  users(pagination: UserPagination): UsersPayload!
}

input RoleCreateInput {
  accessLevel: Int!
  name: String!
}

input RoleUpdateInput {
  accessLevel: Int
  name: String
  updatedAt: Int
  deletedAt: Int
  createdAt: Int
}

input RolesCreateInput {
  roles: [RoleCreateInput!]!
}

type RolePayload {
  role: Role!
}

type RoleDeletePayload {
  id: ID!
}

type RolesPayload {
  roles: [Role!]!
}

type RolesDeletePayload {
  ids: [ID!]!
}

type RolesUpdatePayload {
  ok: Boolean!
}

input UserCreateInput {
  firstName: String
  lastName: String
  username: String
  password: String
  email: String
  roleId: ID
}

input UserUpdateInput {
  firstName: String
  lastName: String
  mobile: String
  phone: String
  address: String
}

input UsersCreateInput {
  users: [UserCreateInput!]!
}

type UserPayload {
  user: User!
}

type UserDeletePayload {
  id: ID!
}

type UsersPayload {
  users: [User!]!
}

type UsersDeletePayload {
  ids: [ID!]!
}

type UserUpdatePayload {
  ok: Boolean!
}

type ChangePasswordResponse {
  ok: Boolean!
}

type RefreshTokenResponse {
  token: String!
}

type Mutation {
  createRole(input: RoleCreateInput!): RolePayload!
  login(username: String!, password: String!): LoginResponse!
  changePassword(oldPassword: String!, newPassword: String!): ChangePasswordResponse!
  refreshToken(token: String!): RefreshTokenResponse!
  createUser(input: UserCreateInput!): UserPayload!
  updateUser(input: UserUpdateInput): UserUpdatePayload!
  deleteUser: UserDeletePayload!
}

type Subscription {
  userNotification: User!
}
